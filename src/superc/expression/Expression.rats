/*
 * xtc - The eXTensible Compiler
 * Copyright (C) 2009-2012 New York University
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
 * USA.
 */

/*
 * The C preprocessor expression grammar.  This is a simplified extract of the
 * expression grammar from the xtc C core.
 *
 * @author Paul Gazzillo
 * @version $Revision: 1.9 $
 */
module superc.expression.Expression(Constant,
                                    Identifier,
                                    Symbol,
                                    Spacing);

import Constant;
import Identifier;
import Symbol;
import Spacing;

modify Constant;

// --------------------------------------------------------------- Constants

// ensure spacing is defined on the constant node for predictable formatting node placement
Node Constant :=
    IntegerConstant   Spacing
  / CharacterConstant Spacing
  ;

// --------------------------------------------------------------- Expressions

public Node ConstantExpression = ConditionalExpression ;

generic ConditionalExpression =
    <Conditional>           LogicalOrExpression void:"?":Symbol
      ConstantExpression  void:":":Symbol ConditionalExpression
  / <Base>                  yyValue:LogicalOrExpression
  ;

generic LogicalOrExpression =
    <Or>   LogicalOrExpression void:"||":Symbol LogicalAndExpression
  / <Base> yyValue:LogicalAndExpression
  ;

transient generic LogicalAndExpression =
    <And>  LogicalAndExpression void:"&&":Symbol BitwiseOrExpression
  / <Base> yyValue:BitwiseOrExpression
  ;

transient generic BitwiseOrExpression =
    <Or>   BitwiseOrExpression void:"|":Symbol BitwiseXorExpression
  / <Base> yyValue:BitwiseXorExpression
  ;

transient generic BitwiseXorExpression =
    <Xor>  BitwiseXorExpression void:"^":Symbol BitwiseAndExpression
  / <Base> yyValue:BitwiseAndExpression
  ;

transient generic BitwiseAndExpression =
    <And>  BitwiseAndExpression void:"&":Symbol EqualityExpression
  / <Base> yyValue:EqualityExpression
  ;

transient generic EqualityExpression =
    <Recursion> EqualityExpression EqualityOperator RelationalExpression
  / <Base>      yyValue:RelationalExpression
  ;

String EqualityOperator =
    <Equal>    "==":Symbol
  / <NotEqual> "!=":Symbol
  ;

transient generic RelationalExpression =
    <Recursion> RelationalExpression RelationalOperator ShiftExpression
  / <Base>      yyValue:ShiftExpression
  ;

String RelationalOperator =
    <LessEqual>    "<=":Symbol
  / <Less>         "<":Symbol
  / <GreaterEqual> ">=":Symbol
  / <Greater>      ">":Symbol
  ;

transient generic ShiftExpression =
    <Recursion>  ShiftExpression ShiftOperator AdditiveExpression
  / <Base>       yyValue:AdditiveExpression
  ;

String ShiftOperator =
    <Left>  "<<":Symbol
  / <Right> ">>":Symbol
  ;

transient generic AdditiveExpression =
    <Recursion> AdditiveExpression AdditiveOperator MultiplicativeExpression
  / <Base>      yyValue:MultiplicativeExpression
  ;

String AdditiveOperator =
    <Plus>  "+":Symbol
  / <Minus> "-":Symbol
  ;

transient generic MultiplicativeExpression =
    <Recursion> MultiplicativeExpression MultiplicativeOperator UnaryExpression
  / <Base>      yyValue:UnaryExpression
  ;

String MultiplicativeOperator =
    <Times>  "*":Symbol
  / <Over>   "/":Symbol
  / <Modulo> "%":Symbol
  ;

Node UnaryExpression =
    <Minus>             UnaryMinusExpression
  / <Plus>              UnaryPlusExpression
  / <LogicalNot>        LogicalNegationExpression
  / <BitwiseNot>        BitwiseNegationExpression
  / <Defined>           DefinedExpression
  / <Base>              PrimaryExpression
  ;

inline generic UnaryMinusExpression      = void:"-":Symbol  UnaryExpression  ;
inline generic UnaryPlusExpression       = void:"+":Symbol  UnaryExpression  ;
inline generic LogicalNegationExpression = void:"!":Symbol  UnaryExpression  ;
inline generic BitwiseNegationExpression = void:"~":Symbol  UnaryExpression  ;
inline generic DefinedExpression         =
    void:"defined":Symbol  void:"(":Symbol PrimaryIdentifier void:")":Symbol
  / void:"defined":Symbol                  PrimaryIdentifier
  ;

Node PrimaryExpression =
    <Constant>                Constant
  / <Identifier>              PrimaryIdentifier
  / <ParenthesizedExpression> void:"(":Symbol ConstantExpression void:")":Symbol
  ;

inline generic PrimaryIdentifier = !Symbol Identifier ;
