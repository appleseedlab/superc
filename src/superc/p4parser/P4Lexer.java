/* The following code was generated by JFlex 1.4.3 on 3/28/22, 12:15 PM */

package superc.p4parser;

import xtc.tree.Location;

import superc.core.Syntax;
import superc.core.Syntax.Language;
import superc.core.Syntax.PreprocessorTag;
import superc.core.Syntax.Text;
import superc.core.Syntax.Layout;
import superc.core.Syntax.EOF;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/28/22, 12:15 PM from the specification file
 * <tt>p4lexer.l.i</tt>
 */
class P4Lexer implements superc.core.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PRAGMA_LINE = 4;
  public static final int YYINITIAL = 0;
  public static final int PREPROC = 6;
  public static final int COMMENT = 2;
  public static final int PP_FRACTION_NON_EMPTY = 8;
  public static final int RANGE_DOTS = 12;
  public static final int PP_FRACTION_CAN_BE_EMPTY = 10;
  public static final int RANGE_END = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\7\2\0\1\30\22\0\1\105\1\66\1\6\1\61"+
    "\1\0\1\72\1\62\1\3\1\56\1\57\1\71\1\70\1\60\1\24"+
    "\1\25\1\27\1\10\1\20\6\16\2\2\1\101\1\103\1\63\1\65"+
    "\1\67\1\102\1\104\1\12\1\17\1\12\1\13\1\22\1\107\5\1"+
    "\1\106\2\1\1\15\1\23\7\1\1\11\2\1\1\75\1\5\1\76"+
    "\1\73\1\14\1\0\1\31\1\32\1\36\1\44\1\45\1\46\1\54"+
    "\1\52\1\37\1\1\1\53\1\42\1\50\1\4\1\40\1\41\1\1"+
    "\1\35\1\33\1\34\1\47\1\55\1\21\1\51\1\43\1\1\1\77"+
    "\1\64\1\100\1\74\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\10\0\1\2\1\3\1\0\1\4\1\3"+
    "\1\5\1\6\1\7\1\10\1\11\20\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\41"+
    "\1\43\1\0\1\15\1\0\1\1\2\44\1\1\1\45"+
    "\10\0\1\43\1\3\2\43\1\46\1\0\1\47\2\50"+
    "\1\0\4\43\1\51\1\52\1\0\1\53\17\2\1\54"+
    "\1\55\15\2\1\56\1\0\1\57\1\60\1\61\1\0"+
    "\1\62\1\0\1\63\1\64\1\65\1\66\1\67\1\0"+
    "\1\70\1\71\1\0\1\1\1\0\1\72\5\0\1\43"+
    "\1\3\1\73\1\0\2\43\1\46\4\3\1\43\1\51"+
    "\3\2\1\74\15\2\1\75\1\2\1\76\14\2\1\77"+
    "\3\2\1\0\1\100\1\101\1\102\3\0\1\73\1\46"+
    "\1\0\1\103\1\51\1\0\3\2\1\104\7\2\1\105"+
    "\1\106\1\2\1\107\10\2\1\110\1\2\1\111\1\2"+
    "\1\112\5\2\1\113\3\0\2\2\1\114\1\2\1\115"+
    "\3\2\1\116\2\2\1\117\1\2\1\120\1\2\1\121"+
    "\4\2\1\122\1\2\1\123\4\2\1\124\1\0\1\2"+
    "\1\125\1\126\1\127\1\130\1\131\2\2\1\132\1\2"+
    "\1\133\3\2\1\134\1\2\1\135\1\136\1\2\1\124"+
    "\1\0\1\2\1\137\1\2\1\140\1\141\1\142\1\143"+
    "\1\144\3\2\1\145\1\146\7\2\1\147\1\150\1\151"+
    "\2\2\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u03f0\0\u0558\0\u05a0\0\u05e8\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870"+
    "\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0"+
    "\0\u0558\0\u0558\0\u0558\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18"+
    "\0\u0c60\0\u0ca8\0\u0cf0\0\u0558\0\u0558\0\u0558\0\u0558\0\u0558"+
    "\0\u0558\0\u0558\0\u0558\0\u0558\0\u0558\0\u0558\0\u0d38\0\u0d80"+
    "\0\u0558\0\u0dc8\0\u0e10\0\u0e58\0\u0558\0\u0ea0\0\u0ee8\0\u0558"+
    "\0\u0f30\0\u0558\0\u01f8\0\u0f78\0\u0558\0\u0fc0\0\u1008\0\u1050"+
    "\0\u1098\0\u0360\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248"+
    "\0\u1290\0\u0558\0\u04c8\0\u12d8\0\u1320\0\u1368\0\u1170\0\u13b0"+
    "\0\u13f8\0\u1440\0\u0558\0\u1488\0\u0558\0\u14d0\0\u1518\0\u1560"+
    "\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0"+
    "\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u03f0\0\u1950\0\u1998"+
    "\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
    "\0\u1c20\0\u1c68\0\u1cb0\0\u0558\0\u1cf8\0\u1d40\0\u0558\0\u0558"+
    "\0\u1d88\0\u0558\0\u1dd0\0\u0558\0\u0558\0\u0558\0\u0558\0\u0558"+
    "\0\u1e18\0\u0558\0\u0558\0\u0f30\0\u1e60\0\u1ea8\0\u0558\0\u1ef0"+
    "\0\u1f38\0\u0558\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8"+
    "\0\u2130\0\u2178\0\u1128\0\u1368\0\u21c0\0\u13b0\0\u13f8\0\u2208"+
    "\0\u1128\0\u2250\0\u2298\0\u22e0\0\u03f0\0\u2328\0\u2370\0\u23b8"+
    "\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8"+
    "\0\u2640\0\u2688\0\u03f0\0\u26d0\0\u03f0\0\u2718\0\u2760\0\u27a8"+
    "\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0\0\u29e8"+
    "\0\u2a30\0\u03f0\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u0558\0\u0558"+
    "\0\u0558\0\u2b98\0\u1ef0\0\u2be0\0\u1128\0\u2c28\0\u2c70\0\u2178"+
    "\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u03f0\0\u2e20\0\u2e68"+
    "\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u03f0\0\u3018\0\u3060"+
    "\0\u03f0\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258"+
    "\0\u32a0\0\u03f0\0\u32e8\0\u03f0\0\u3330\0\u03f0\0\u3378\0\u33c0"+
    "\0\u3408\0\u3450\0\u3498\0\u03f0\0\u34e0\0\u3528\0\u3570\0\u35b8"+
    "\0\u3600\0\u03f0\0\u3648\0\u03f0\0\u3690\0\u36d8\0\u3720\0\u03f0"+
    "\0\u3768\0\u37b0\0\u03f0\0\u37f8\0\u03f0\0\u3840\0\u03f0\0\u3888"+
    "\0\u38d0\0\u3918\0\u3960\0\u03f0\0\u39a8\0\u03f0\0\u39f0\0\u3a38"+
    "\0\u3a80\0\u3ac8\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u03f0\0\u03f0"+
    "\0\u03f0\0\u03f0\0\u3c30\0\u3c78\0\u03f0\0\u3cc0\0\u03f0\0\u3d08"+
    "\0\u3d50\0\u3d98\0\u03f0\0\u3de0\0\u3e28\0\u03f0\0\u3e70\0\u3eb8"+
    "\0\u3f00\0\u3f48\0\u03f0\0\u3f90\0\u03f0\0\u03f0\0\u03f0\0\u03f0"+
    "\0\u03f0\0\u3fd8\0\u4020\0\u4068\0\u0558\0\u03f0\0\u40b0\0\u40f8"+
    "\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\u03f0\0\u03f0\0\u03f0"+
    "\0\u42a8\0\u42f0\0\u03f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\17\1\20\1\0\1\17\1\0\1\21\1\22"+
    "\1\23\3\17\1\24\1\17\1\20\1\17\1\20\3\17"+
    "\1\25\1\26\1\27\1\30\1\27\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\17\1\42"+
    "\1\43\1\44\1\17\1\45\1\17\1\46\1\47\1\17"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\27\2\17\7\100\1\101\61\100\1\102\16\100\2\0"+
    "\1\103\5\0\1\103\5\0\1\103\1\0\1\103\4\0"+
    "\1\104\33\0\1\105\27\0\1\17\1\20\1\0\1\17"+
    "\1\106\1\21\1\22\1\23\3\17\1\24\1\17\1\20"+
    "\1\17\1\20\3\17\1\25\1\26\1\27\1\30\1\27"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\17\1\42\1\43\1\44\1\17\1\45\1\17"+
    "\1\46\1\47\1\17\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\27\2\17\2\0\1\107\5\0"+
    "\1\107\5\0\1\107\1\0\1\107\67\0\7\110\1\0"+
    "\12\110\2\111\15\110\1\111\1\112\2\110\1\111\1\112"+
    "\37\110\2\112\2\0\1\113\5\0\1\113\5\0\1\113"+
    "\1\0\1\113\4\0\1\114\64\0\1\113\5\0\1\113"+
    "\5\0\1\113\1\0\1\113\71\0\1\11\5\0\1\11"+
    "\5\0\1\11\1\0\1\11\4\0\1\115\64\0\1\116"+
    "\5\0\1\116\5\0\1\116\1\0\1\116\21\0\1\117"+
    "\3\0\1\117\37\0\2\117\2\0\1\11\5\0\1\11"+
    "\5\0\1\11\1\0\1\11\71\0\1\120\5\0\1\120"+
    "\5\0\1\120\1\0\1\120\21\0\1\121\3\0\1\121"+
    "\37\0\2\121\2\0\1\122\5\0\1\122\5\0\1\122"+
    "\1\0\1\122\71\0\1\123\5\0\1\123\5\0\1\123"+
    "\1\0\1\123\70\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\25\17\30\0\2\17\1\0\1\124\1\20\1\0"+
    "\1\124\3\0\1\20\3\124\1\125\1\124\1\20\1\124"+
    "\1\20\1\126\2\127\1\0\1\130\3\0\2\124\1\126"+
    "\5\124\1\127\3\124\1\127\10\124\30\0\2\124\5\21"+
    "\1\131\1\132\101\21\7\0\1\133\16\0\1\134\1\135"+
    "\1\134\54\0\1\134\3\0\1\124\1\20\1\0\1\124"+
    "\3\0\1\20\1\136\1\124\1\137\1\125\1\140\1\20"+
    "\1\141\1\20\1\126\2\127\1\0\1\130\3\0\1\124"+
    "\1\141\1\126\4\124\1\140\1\127\2\124\1\137\1\127"+
    "\3\124\1\136\4\124\30\0\2\124\112\0\1\142\5\0"+
    "\1\142\5\0\1\142\1\0\1\142\4\0\1\143\71\0"+
    "\1\133\16\0\1\27\1\135\1\27\54\0\1\27\31\0"+
    "\1\144\41\0\1\145\17\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\1\17\1\146\3\17\1\147\2\17\1\150"+
    "\14\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\6\17\1\151\1\152\15\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\11\17\1\153\2\17"+
    "\5\0\3\17\1\154\10\17\1\155\10\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\1\156"+
    "\3\17\1\157\5\17\1\160\3\17\1\161\2\17\1\162"+
    "\3\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\14\17\1\163\10\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\7\17\1\164"+
    "\15\17\30\0\2\17\1\0\2\17\1\0\1\165\3\0"+
    "\14\17\5\0\15\17\1\166\7\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\16\17\1\167"+
    "\6\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\1\170\24\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\14\17\1\171\10\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\172\3\0\14\17"+
    "\5\0\4\17\1\173\4\17\1\174\6\17\1\175\4\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\1\176\24\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\1\177\24\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\14\17"+
    "\1\200\10\17\30\0\2\17\1\0\2\17\1\0\1\17"+
    "\3\0\14\17\5\0\14\17\1\201\10\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\1\202"+
    "\6\17\1\203\15\17\30\0\2\17\61\0\1\204\23\0"+
    "\1\205\64\0\1\206\110\0\1\207\1\0\1\210\46\0"+
    "\1\211\37\0\1\212\3\0\1\213\104\0\1\214\107\0"+
    "\1\215\107\0\1\216\1\0\1\217\110\0\1\220\60\0"+
    "\1\221\46\0\7\100\1\0\61\100\1\0\16\100\27\0"+
    "\1\222\61\0\1\124\1\103\1\0\1\124\3\0\1\103"+
    "\5\124\1\103\1\124\1\103\1\124\2\127\1\0\1\130"+
    "\3\0\10\124\1\127\3\124\1\127\10\124\30\0\2\124"+
    "\2\0\1\142\5\0\1\142\5\0\1\142\1\0\1\142"+
    "\76\0\1\223\102\0\1\107\5\0\1\107\5\0\1\107"+
    "\1\0\1\107\1\0\2\224\15\0\1\224\1\112\2\0"+
    "\1\224\1\112\37\0\2\112\2\0\1\225\5\0\1\225"+
    "\5\0\1\225\1\0\1\225\3\0\1\226\43\0\1\226"+
    "\44\0\1\227\64\0\1\116\5\0\1\116\5\0\1\116"+
    "\1\0\1\116\1\0\2\230\1\231\14\0\1\230\3\0"+
    "\1\230\22\0\1\231\21\0\1\116\5\0\1\116\5\0"+
    "\1\116\1\0\1\116\71\0\1\120\5\0\1\120\5\0"+
    "\1\120\1\0\1\120\1\0\2\232\1\233\14\0\1\232"+
    "\3\0\1\232\22\0\1\233\21\0\1\120\5\0\1\120"+
    "\5\0\1\120\1\0\1\120\71\0\1\123\5\0\1\123"+
    "\5\0\1\123\1\0\1\123\4\0\1\234\63\0\2\124"+
    "\1\0\1\124\3\0\12\124\2\235\1\0\1\124\3\0"+
    "\10\124\1\235\3\124\1\235\10\124\30\0\2\124\1\0"+
    "\1\124\1\125\1\0\1\124\3\0\1\125\3\124\1\125"+
    "\1\124\1\125\1\124\1\125\1\124\2\235\1\0\1\124"+
    "\3\0\10\124\1\235\3\124\1\235\10\124\30\0\2\124"+
    "\1\0\1\124\1\125\1\0\1\124\3\0\1\236\3\124"+
    "\1\125\1\124\1\125\1\124\1\125\1\124\2\235\1\0"+
    "\1\124\3\0\10\124\1\235\3\124\1\235\10\124\30\0"+
    "\2\124\1\0\1\124\1\237\1\0\1\124\3\0\1\237"+
    "\5\124\1\237\1\124\1\237\1\124\2\235\1\240\1\124"+
    "\3\0\10\124\1\235\3\124\1\235\10\124\12\0\1\240"+
    "\15\0\2\124\1\0\1\124\1\142\1\0\1\124\3\0"+
    "\1\142\5\124\1\142\1\124\1\142\1\124\2\241\1\0"+
    "\1\242\3\0\10\124\1\241\1\243\2\124\1\241\1\243"+
    "\7\124\30\0\2\243\3\0\5\21\24\0\2\21\44\0"+
    "\1\21\33\0\1\134\1\0\1\134\54\0\1\134\31\0"+
    "\1\144\61\0\1\124\1\244\1\0\1\124\3\0\1\244"+
    "\1\124\3\244\1\124\3\244\1\124\1\245\1\235\1\0"+
    "\1\124\3\0\2\244\3\124\1\244\2\124\1\235\2\124"+
    "\1\244\1\245\1\244\7\124\30\0\1\124\1\244\1\0"+
    "\2\124\1\0\1\124\3\0\1\246\3\124\1\246\1\124"+
    "\1\246\1\124\1\246\1\124\2\235\1\0\1\124\3\0"+
    "\10\124\1\235\3\124\1\235\10\124\30\0\2\124\1\0"+
    "\2\124\1\0\1\124\3\0\1\247\3\124\1\247\3\124"+
    "\1\247\1\124\2\235\1\0\1\124\3\0\10\124\1\235"+
    "\3\124\1\235\10\124\30\0\2\124\1\0\1\124\1\142"+
    "\1\0\1\124\3\0\1\142\5\124\1\142\1\124\1\142"+
    "\1\124\2\250\1\0\1\124\3\0\10\124\1\250\1\251"+
    "\2\124\1\250\1\251\7\124\30\0\2\251\7\144\1\133"+
    "\20\144\1\0\57\144\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\2\17\1\252\22\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\3\17\1\253"+
    "\21\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\10\17\1\254\14\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\3\17\1\255"+
    "\21\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\7\17\1\256\15\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\6\17\1\257"+
    "\16\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\1\260\3\17\1\261\20\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\11\17"+
    "\1\262\13\17\30\0\2\17\1\0\2\17\1\0\1\17"+
    "\3\0\14\17\5\0\1\17\1\263\23\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\1\264"+
    "\15\17\1\265\6\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\10\17\1\266\14\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\10\17\1\267\14\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\6\17\1\270\16\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\3\17\1\271\21\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\272\3\0\14\17\5\0\25\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\3\17\1\273"+
    "\3\17\1\274\15\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\3\17\1\275\21\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\4\17\1\276\1\277\17\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\15\17\1\300\7\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\3\17\1\301\12\17\1\302\6\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\4\17"+
    "\1\303\20\17\30\0\2\17\1\0\2\17\1\0\1\17"+
    "\3\0\14\17\5\0\2\17\1\304\22\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\3\17"+
    "\1\305\2\17\1\306\16\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\11\17\1\307\13\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\3\17\1\310\21\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\1\311\24\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\12\17\1\312\12\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\4\17\1\313\4\17\1\314"+
    "\13\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\6\17\1\315\16\17\30\0\2\17\2\0"+
    "\1\316\5\0\1\316\5\0\1\316\1\0\1\316\151\0"+
    "\1\317\111\0\1\320\107\0\1\321\60\0\1\322\54\0"+
    "\1\225\5\0\1\225\5\0\1\225\1\0\1\225\21\0"+
    "\1\112\3\0\1\112\37\0\2\112\2\0\1\225\5\0"+
    "\1\225\5\0\1\225\1\0\1\225\71\0\1\323\5\0"+
    "\1\323\5\0\1\323\1\0\1\323\111\0\2\230\15\0"+
    "\1\230\3\0\1\230\64\0\2\232\15\0\1\232\3\0"+
    "\1\232\67\0\1\232\63\0\2\124\1\0\1\124\3\0"+
    "\12\124\2\235\1\324\1\124\3\0\10\124\1\235\3\124"+
    "\1\235\10\124\12\0\1\324\15\0\2\124\1\0\1\124"+
    "\1\125\1\0\1\124\3\0\1\125\1\136\1\124\1\137"+
    "\1\125\1\140\1\125\1\141\1\125\1\124\2\235\1\0"+
    "\1\124\3\0\1\124\1\141\5\124\1\140\1\235\2\124"+
    "\1\137\1\235\3\124\1\136\4\124\30\0\2\124\1\0"+
    "\1\124\1\237\1\0\1\124\3\0\1\237\5\124\1\237"+
    "\1\124\1\237\1\124\2\235\1\0\1\124\3\0\10\124"+
    "\1\235\1\325\2\124\1\235\1\325\7\124\30\0\2\325"+
    "\2\0\1\237\5\0\1\237\5\0\1\237\1\0\1\237"+
    "\70\0\1\124\1\326\1\0\1\124\3\0\1\326\5\124"+
    "\1\326\1\124\1\326\1\124\2\235\1\327\1\124\3\0"+
    "\10\124\1\235\3\124\1\235\10\124\12\0\1\327\15\0"+
    "\2\124\1\0\1\124\1\330\1\0\1\124\3\0\1\330"+
    "\5\124\1\330\1\124\1\330\1\124\2\235\1\0\1\124"+
    "\3\0\10\124\1\235\3\124\1\235\10\124\30\0\2\124"+
    "\1\0\1\124\1\244\1\0\1\124\3\0\1\244\1\124"+
    "\3\244\1\124\3\244\1\124\1\245\1\235\1\324\1\124"+
    "\3\0\2\244\3\124\1\244\2\124\1\235\2\124\1\244"+
    "\1\245\1\244\7\124\12\0\1\324\15\0\1\124\1\244"+
    "\1\0\1\124\1\331\1\0\1\124\3\0\1\331\5\124"+
    "\1\331\1\124\1\331\1\124\2\235\1\332\1\124\3\0"+
    "\10\124\1\235\3\124\1\235\10\124\12\0\1\332\15\0"+
    "\2\124\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\3\17\1\333\21\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\6\17\1\334\16\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\11\17\1\335\13\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\11\17\1\336\13\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\3\17\1\337\21\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\3\17\1\340\21\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\6\17\1\341\7\17\1\342\6\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\14\17\1\343"+
    "\10\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\11\17\1\344\13\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\345\3\0\14\17\5\0\25\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\14\17\1\346\10\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\14\17\1\347\10\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\11\17\1\350\13\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\2\17\1\351\22\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\16\17\1\352\6\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\2\17\1\353\1\354\21\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\16\17\1\355\6\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\2\17\1\356\22\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\22\17\1\357\2\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\1\360\24\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\4\17\1\361\20\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\17\17\1\362\5\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\7\17\1\363\15\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\14\17\1\364\10\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\14\17\1\365\10\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\3\17\1\366\21\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\2\17\1\367\22\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\5\17\1\370\17\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\13\17\1\371\11\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\1\17\1\372\23\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\16\17\1\373\6\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\13\17\1\374\11\17\30\0"+
    "\2\17\2\0\1\316\3\0\1\375\1\0\1\316\5\0"+
    "\1\316\1\0\1\316\64\0\1\376\33\0\1\377\60\0"+
    "\1\124\5\0\1\124\5\0\1\124\1\0\1\124\70\0"+
    "\1\124\1\326\1\0\1\124\3\0\1\326\5\124\1\326"+
    "\1\124\1\326\1\124\2\235\1\0\1\124\3\0\10\124"+
    "\1\235\1\243\2\124\1\235\1\243\7\124\30\0\2\243"+
    "\2\0\1\326\5\0\1\326\5\0\1\326\1\0\1\326"+
    "\70\0\1\124\1\331\1\0\1\124\3\0\1\331\5\124"+
    "\1\331\1\124\1\331\1\124\2\235\1\0\1\124\3\0"+
    "\10\124\1\235\1\251\2\124\1\235\1\251\7\124\30\0"+
    "\2\251\2\0\1\331\5\0\1\331\5\0\1\331\1\0"+
    "\1\331\70\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\4\17\1\u0100\20\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\7\17\1\u0101\15\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\12\17\1\u0102\12\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\17\3\0\14\17\5\0\5\17\1\u0103\17\17\30\0"+
    "\2\17\1\0\2\17\1\0\1\17\3\0\14\17\5\0"+
    "\14\17\1\u0104\10\17\30\0\2\17\1\0\2\17\1\0"+
    "\1\u0105\3\0\14\17\5\0\25\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\5\17\1\u0106"+
    "\17\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\5\17\1\u0107\17\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\14\17\1\u0108"+
    "\10\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\2\17\1\u0109\22\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\13\17\1\u010a"+
    "\11\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\14\17\1\u010b\10\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\4\17\1\u010c"+
    "\20\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\3\17\1\u010d\21\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\4\17\1\u010e"+
    "\20\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\3\17\1\u010f\21\17\30\0\2\17\1\0"+
    "\2\17\1\0\1\17\3\0\14\17\5\0\14\17\1\u0110"+
    "\10\17\30\0\2\17\1\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\1\u0111\24\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\16\17\1\u0112\6\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\6\17\1\u0113\16\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\4\17\1\u0114\20\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\4\17\1\u0115\20\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\14\17\1\u0116\10\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\21\17\1\u0117\3\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\14\17\1\u0118\10\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\6\17\1\u0119\16\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\14\17\1\u011a\10\17"+
    "\30\0\2\17\6\375\1\u011b\101\375\6\0\1\375\76\0"+
    "\1\376\56\0\1\u011c\34\0\2\17\1\0\1\17\3\0"+
    "\14\17\5\0\1\u011d\24\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\u011e\3\0\14\17\5\0\25\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\21\17"+
    "\1\u011f\3\17\30\0\2\17\1\0\2\17\1\0\1\17"+
    "\3\0\14\17\5\0\23\17\1\u0120\1\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\3\17"+
    "\1\u0121\21\17\30\0\2\17\1\0\2\17\1\0\1\17"+
    "\3\0\14\17\5\0\3\17\1\u0122\21\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\6\17"+
    "\1\u0123\16\17\30\0\2\17\1\0\2\17\1\0\1\17"+
    "\3\0\14\17\5\0\14\17\1\u0124\10\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\u0125\3\0\14\17\5\0\25\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\7\17\1\u0126\15\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\4\17\1\u0127\20\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\23\17\1\u0128\1\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\11\17\1\u0129\13\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\14\17\1\u012a\10\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\u012b\3\0\14\17\5\0\25\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\4\17\1\u012c\7\17"+
    "\5\0\25\17\30\0\2\17\1\0\2\17\1\0\1\17"+
    "\3\0\14\17\5\0\4\17\1\u012d\20\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\3\17"+
    "\1\u012e\21\17\30\0\2\17\1\0\2\17\1\0\1\17"+
    "\3\0\4\17\1\u012f\7\17\5\0\25\17\30\0\2\17"+
    "\2\0\1\u0130\5\0\1\u0130\5\0\1\u0130\1\0\1\u0130"+
    "\5\0\1\u011b\56\0\1\u011b\52\0\1\u0131\40\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\5\17\1\u0132\17\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\2\17\1\u0133\22\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\3\17\1\u0134\21\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\15\17\1\u0135\7\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\11\17\1\u0136\13\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\14\17\1\u0137\10\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\3\17\1\u0138\21\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\2\17\1\u0139\22\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\22\17\1\u013a\2\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\4\17"+
    "\1\u013b\7\17\5\0\25\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\2\17\1\u013c\22\17"+
    "\30\0\2\17\2\0\1\u0130\5\0\1\u0130\5\0\1\u0130"+
    "\1\0\1\u0130\64\0\1\u0130\33\0\1\u013d\57\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\3\17\1\u013e\21\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\6\17\1\u013f\16\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\6\17\1\u0140\16\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\16\17\1\u0141\6\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\17\3\0\14\17\5\0\14\17\1\u0142\10\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\7\17\1\u0143\15\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\u0144\3\0\14\17\5\0\25\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\u0145\3\0\14\17\5\0\25\17"+
    "\30\0\2\17\1\0\2\17\1\0\1\17\3\0\14\17"+
    "\5\0\3\17\1\u0146\21\17\30\0\2\17\1\0\2\17"+
    "\1\0\1\u0147\3\0\14\17\5\0\25\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\13\17"+
    "\1\u0148\11\17\30\0\2\17\1\0\2\17\1\0\1\17"+
    "\3\0\14\17\5\0\6\17\1\u0149\16\17\30\0\2\17"+
    "\1\0\2\17\1\0\1\17\3\0\14\17\5\0\7\17"+
    "\1\u014a\15\17\30\0\2\17\1\0\2\17\1\0\1\u014b"+
    "\3\0\14\17\5\0\25\17\30\0\2\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17208];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\5\0\1\1\2\0\2\1\1\0\3\1"+
    "\1\11\23\1\3\11\10\1\13\11\2\1\1\11\2\1"+
    "\1\0\1\11\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\11\1\1\2\0\2\1\1\0\5\1\1\0"+
    "\1\11\2\1\1\0\5\1\1\11\1\0\1\11\36\1"+
    "\1\11\1\0\1\1\2\11\1\0\1\11\1\0\5\11"+
    "\1\0\2\11\1\0\1\1\1\0\1\11\2\0\1\11"+
    "\2\0\3\1\1\0\55\1\1\0\3\11\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\42\1\3\0\34\1"+
    "\1\0\24\1\1\0\13\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */


  private StringBuilder comment = null;


  private boolean commentnl = false;


  private String fileName = null;


  private StringBuilder float_num = null;

  private int saveState = 0;


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  P4Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  P4Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Syntax yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.AT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 107: break;
        case 42: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.RANGE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 108: break;
        case 43: 
          { yybegin(COMMENT);
comment = new StringBuilder();
comment.append(yytext());
commentnl = false;
          }
        case 109: break;
        case 37: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.INTEGER, yytext());
      syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
      yybegin(YYINITIAL);
      return syntax;
          }
        case 110: break;
        case 83: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.FALSE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 111: break;
        case 51: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 112: break;
        case 2: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.IDENTIFIER, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 113: break;
        case 19: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_ANGLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 114: break;
        case 68: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BOOL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 115: break;
        case 73: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ELSE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 116: break;
        case 72: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ENUM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 117: break;
        case 23: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BIT_XOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 118: break;
        case 44: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.IN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 119: break;
        case 94: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.VARBIT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 120: break;
        case 85: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ACTION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 121: break;
        case 104: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TRANSITION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 122: break;
        case 38: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 10;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 11;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(PP_FRACTION_CAN_BE_EMPTY);
  float_num = new StringBuilder();
  float_num.append(yytext());
          }
        case 123: break;
        case 98: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PACKAGE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 124: break;
        case 102: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ABSTRACT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 125: break;
        case 17: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ASSIGN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 126: break;
        case 25: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.L_BRACKET); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 127: break;
        case 96: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TYPEDEF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 128: break;
        case 91: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PARSER); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 129: break;
        case 80: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.CONST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 130: break;
        case 36: 
          { yybegin(YYINITIAL);
    Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.FLOATING_CONSTANT, float_num.toString());
    syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
    return syntax;
          }
        case 131: break;
        case 90: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.RETURN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 132: break;
        case 52: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.NE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 133: break;
        case 93: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.HEADER); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 134: break;
        case 33: 
          { comment.append(yytext());
          }
        case 135: break;
        case 100: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ENTRIES); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 136: break;
        case 22: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MOD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 137: break;
        case 77: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.STATE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 138: break;
        case 9: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DIV); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 139: break;
        case 12: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.COMMA); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 140: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_ANGLE_SHIFT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 141: break;
        case 65: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MINUS_SAT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 142: break;
        case 46: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DHASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 143: break;
        case 58: 
          { yybegin(RANGE_END);
    Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.RANGE);
    syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1));
    return syntax;
          }
        case 144: break;
        case 106: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.HEADER_UNION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 145: break;
        case 64: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MASK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 146: break;
        case 56: 
          { comment.append(yytext()); yybegin(YYINITIAL);
return new Layout(comment.toString(), false);
          }
        case 147: break;
        case 59: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.FLOATING_CONSTANT, yytext());
  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
          }
        case 148: break;
        case 62: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.OUT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 149: break;
        case 89: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.SELECT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 150: break;
        case 3: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.INTEGER, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 151: break;
        case 61: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.INT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 152: break;
        case 63: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.KEY); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 153: break;
        case 53: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.GE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 154: break;
        case 14: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BIT_AND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 155: break;
        case 20: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PLUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 156: break;
        case 39: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.STRING_LITERAL, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 157: break;
        case 67: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 12;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 13;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(RANGE_DOTS);
  Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.INTEGER, yytext());
  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
          }
        case 158: break;
        case 70: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TYPE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 159: break;
        case 69: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TRUE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 160: break;
        case 86: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.SWITCH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 161: break;
        case 97: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.CONTROL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 162: break;
        case 87: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.STRING); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 163: break;
        case 84: 
          { return new Layout(yytext(), true);
          }
        case 164: break;
        case 66: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PLUS_SAT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 165: break;
        case 5: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DONTCARE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 166: break;
        case 48: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.SHL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 167: break;
        case 18: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.NOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 168: break;
        case 79: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TUPLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 169: break;
        case 31: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.SEMICOLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 170: break;
        case 35: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.PPNUM, yytext());
  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
          }
        case 171: break;
        case 30: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.QUESTION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 172: break;
        case 8: 
          { return new Layout(yytext(), false);
          }
        case 173: break;
        case 78: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TABLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 174: break;
        case 13: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.HASH);

syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1));
yybegin(PREPROC);
return syntax;
          }
        case 175: break;
        case 16: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BIT_OR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 176: break;
        case 50: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.OR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 177: break;
        case 103: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.VALUESET); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 178: break;
        case 1: 
          { yybegin(YYINITIAL);
    float_num.append(yytext());
    Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.FLOATING_CONSTANT, float_num.toString());
    syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
    return syntax;
          }
        case 179: break;
        case 26: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_BRACKET); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 180: break;
        case 10: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.L_PAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 181: break;
        case 29: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.COLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 182: break;
        case 49: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.LE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 183: break;
        case 27: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.L_BRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 184: break;
        case 40: 
          { if (saveState == PRAGMA_LINE) {
    for (int i = 0; i < yytext().length(); i++) {
        if (yytext().charAt(i) == '\n') {
          saveState = 0 ;
          Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.END_PRAGMA);
          syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1));
          return syntax;
        }
    }
  }
  return new Layout(yytext(), true);
          }
        case 185: break;
        case 71: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.THIS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 186: break;
        case 92: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.EXTERN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 187: break;
        case 41: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(PP_FRACTION_NON_EMPTY);
  float_num = new StringBuilder();
  float_num.append(yytext());
          }
        case 188: break;
        case 74: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.EXIT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 189: break;
        case 81: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.INOUT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 190: break;
        case 7: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 191: break;
        case 82: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ERROR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 192: break;
        case 24: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.COMPLEMENT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 193: break;
        case 88: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.STRUCT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 194: break;
        case 99: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DEFAULT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 195: break;
        case 76: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.APPLY); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 196: break;
        case 15: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.L_ANGLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 197: break;
        case 11: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_PAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 198: break;
        case 47: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.AND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 199: break;
        case 55: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PP); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 200: break;
        case 6: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MINUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 201: break;
        case 95: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ACTIONS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 202: break;
        case 60: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BIT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 203: break;
        case 105: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MATCH_KIND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 204: break;
        case 75: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.VOID); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 205: break;
        case 21: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MUL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 206: break;
        case 101: 
          { saveState = PRAGMA_LINE;
                  yybegin(YYINITIAL);
                  Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PRAGMA);
                  syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1));
                  return syntax;
          }
        case 207: break;
        case 34: 
          { comment.append(yytext()); commentnl = true;
          }
        case 208: break;
        case 4: 
          { yybegin(YYINITIAL);
    return new Layout(yytext(), true);
          }
        case 209: break;
        case 28: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_BRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 210: break;
        case 45: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.IF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 211: break;
        case 57: 
          { 
          }
        case 212: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   EOF syntax = new EOF();

  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
