/* The following code was generated by JFlex 1.4.3 on 3/30/22, 7:59 PM */

package superc.p4parser;

import xtc.tree.Location;

import superc.core.Syntax;
import superc.core.Syntax.Language;
import superc.core.Syntax.PreprocessorTag;
import superc.core.Syntax.Text;
import superc.core.Syntax.Layout;
import superc.core.Syntax.EOF;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/30/22, 7:59 PM from the specification file
 * <tt>p4lexer.l.i</tt>
 */
class P4Lexer implements superc.core.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PRAGMA_LINE = 4;
  public static final int YYINITIAL = 0;
  public static final int PREPROC = 6;
  public static final int COMMENT = 2;
  public static final int PP_FRACTION_NON_EMPTY = 8;
  public static final int RANGE_DOTS = 12;
  public static final int PP_FRACTION_CAN_BE_EMPTY = 10;
  public static final int RANGE_END = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\7\1\27\1\0\1\30\22\0\1\31\1\70\1\6"+
    "\1\63\1\0\1\74\1\64\1\3\1\60\1\61\1\73\1\72\1\62"+
    "\1\24\1\25\1\32\1\10\1\20\6\16\2\2\1\103\1\105\1\65"+
    "\1\67\1\71\1\104\1\106\1\12\1\17\1\12\1\13\1\22\1\110"+
    "\5\1\1\107\2\1\1\15\1\23\7\1\1\11\2\1\1\77\1\5"+
    "\1\100\1\75\1\14\1\0\1\33\1\34\1\40\1\46\1\47\1\50"+
    "\1\56\1\54\1\41\1\1\1\55\1\44\1\52\1\4\1\42\1\43"+
    "\1\1\1\37\1\35\1\36\1\51\1\57\1\21\1\53\1\45\1\1"+
    "\1\101\1\66\1\102\1\76\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\10\0\1\2\1\3\2\0\1\4\1\3"+
    "\1\5\1\6\1\7\1\10\1\11\20\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\41"+
    "\1\43\1\0\1\1\2\44\1\1\1\45\10\0\1\43"+
    "\1\3\2\43\1\46\1\0\1\47\1\0\1\4\1\0"+
    "\4\43\1\50\1\51\1\0\1\52\17\2\1\53\1\54"+
    "\15\2\1\0\1\55\1\56\1\57\1\60\1\0\1\61"+
    "\1\0\1\62\1\63\1\64\1\65\1\66\1\0\1\67"+
    "\1\0\1\1\1\0\1\70\5\0\1\43\1\3\1\71"+
    "\1\0\2\43\1\46\4\3\1\43\1\50\3\2\1\72"+
    "\15\2\1\73\1\2\1\74\14\2\1\75\3\2\1\0"+
    "\1\76\1\77\1\100\3\0\1\71\1\46\1\0\1\101"+
    "\1\50\1\0\3\2\1\102\7\2\1\103\1\104\1\2"+
    "\1\105\10\2\1\106\1\2\1\107\1\2\1\110\5\2"+
    "\1\111\3\0\2\2\1\112\1\2\1\113\3\2\1\114"+
    "\2\2\1\115\1\2\1\116\1\2\1\117\4\2\1\120"+
    "\1\2\1\121\4\2\1\122\1\0\1\2\1\123\1\124"+
    "\1\125\1\126\1\127\2\2\1\130\1\2\1\131\3\2"+
    "\1\132\1\2\1\133\1\134\1\2\1\122\1\0\1\2"+
    "\1\135\1\2\1\136\1\137\1\140\1\141\1\142\3\2"+
    "\1\143\1\144\7\2\1\145\1\146\1\147\2\2\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u03b5\0\u056b\0\u05b4\0\u05fd\0\u0646"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e"+
    "\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6"+
    "\0\u056b\0\u056b\0\u056b\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43"+
    "\0\u0c8c\0\u0cd5\0\u0d1e\0\u056b\0\u056b\0\u056b\0\u056b\0\u056b"+
    "\0\u056b\0\u056b\0\u056b\0\u056b\0\u056b\0\u056b\0\u0d67\0\u0db0"+
    "\0\u056b\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u056b\0\u0f1d\0\u056b"+
    "\0\u01b6\0\u0f66\0\u056b\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u0323"+
    "\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u056b"+
    "\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u1165\0\u13f6\0\u143f\0\u1488"+
    "\0\u056b\0\u14d1\0\u056b\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\u1961\0\u03b5\0\u19aa\0\u19f3\0\u1a3c\0\u1a85"+
    "\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd"+
    "\0\u1d16\0\u1d5f\0\u056b\0\u1da8\0\u056b\0\u056b\0\u1df1\0\u056b"+
    "\0\u1e3a\0\u056b\0\u056b\0\u056b\0\u056b\0\u056b\0\u1e83\0\u056b"+
    "\0\u0f1d\0\u1ecc\0\u1f15\0\u056b\0\u1f5e\0\u1fa7\0\u056b\0\u1ff0"+
    "\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u111c"+
    "\0\u13ad\0\u2238\0\u13f6\0\u143f\0\u2281\0\u111c\0\u22ca\0\u2313"+
    "\0\u235c\0\u03b5\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512"+
    "\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u03b5"+
    "\0\u275a\0\u03b5\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u03b5\0\u2b0f"+
    "\0\u2b58\0\u2ba1\0\u2bea\0\u056b\0\u056b\0\u056b\0\u2c33\0\u1f5e"+
    "\0\u2c7c\0\u111c\0\u2cc5\0\u2d0e\0\u21ef\0\u2d57\0\u2da0\0\u2de9"+
    "\0\u2e32\0\u2e7b\0\u03b5\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8"+
    "\0\u3031\0\u307a\0\u03b5\0\u30c3\0\u310c\0\u03b5\0\u3155\0\u319e"+
    "\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354\0\u03b5\0\u339d"+
    "\0\u03b5\0\u33e6\0\u03b5\0\u342f\0\u3478\0\u34c1\0\u350a\0\u3553"+
    "\0\u03b5\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u03b5\0\u3709"+
    "\0\u03b5\0\u3752\0\u379b\0\u37e4\0\u03b5\0\u382d\0\u3876\0\u03b5"+
    "\0\u38bf\0\u03b5\0\u3908\0\u03b5\0\u3951\0\u399a\0\u39e3\0\u3a2c"+
    "\0\u03b5\0\u3a75\0\u03b5\0\u3abe\0\u3b07\0\u3b50\0\u3b99\0\u3be2"+
    "\0\u3c2b\0\u3c74\0\u3cbd\0\u03b5\0\u03b5\0\u03b5\0\u03b5\0\u3d06"+
    "\0\u3d4f\0\u03b5\0\u3d98\0\u03b5\0\u3de1\0\u3e2a\0\u3e73\0\u03b5"+
    "\0\u3ebc\0\u3f05\0\u03b5\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u03b5"+
    "\0\u4072\0\u03b5\0\u03b5\0\u03b5\0\u03b5\0\u03b5\0\u40bb\0\u4104"+
    "\0\u414d\0\u056b\0\u03b5\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba"+
    "\0\u4303\0\u434c\0\u03b5\0\u03b5\0\u03b5\0\u4395\0\u43de\0\u03b5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\16\1\17\1\0\1\16\1\20\1\21\1\22"+
    "\1\23\3\16\1\24\1\16\1\17\1\16\1\17\3\16"+
    "\1\25\1\26\4\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\16\1\42\1\43"+
    "\1\44\1\16\1\45\1\16\1\46\1\47\1\16\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\2\16"+
    "\7\100\1\101\63\100\1\102\15\100\2\0\1\103\5\0"+
    "\1\103\5\0\1\103\1\0\1\103\4\0\1\104\65\0"+
    "\1\105\5\0\1\105\5\0\1\105\1\0\1\105\70\0"+
    "\7\106\1\0\12\106\2\107\17\106\1\107\1\110\2\106"+
    "\1\107\1\110\36\106\2\110\2\0\1\111\5\0\1\111"+
    "\5\0\1\111\1\0\1\111\4\0\1\112\65\0\1\111"+
    "\5\0\1\111\5\0\1\111\1\0\1\111\72\0\1\10"+
    "\5\0\1\10\5\0\1\10\1\0\1\10\4\0\1\113"+
    "\65\0\1\114\5\0\1\114\5\0\1\114\1\0\1\114"+
    "\23\0\1\115\3\0\1\115\36\0\2\115\2\0\1\10"+
    "\5\0\1\10\5\0\1\10\1\0\1\10\72\0\1\116"+
    "\5\0\1\116\5\0\1\116\1\0\1\116\23\0\1\117"+
    "\3\0\1\117\36\0\2\117\2\0\1\120\5\0\1\120"+
    "\5\0\1\120\1\0\1\120\72\0\1\121\5\0\1\121"+
    "\5\0\1\121\1\0\1\121\71\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\25\16\27\0\2\16\1\0\1\122"+
    "\1\17\1\0\1\122\3\0\1\17\3\122\1\123\1\122"+
    "\1\17\1\122\1\17\1\124\2\125\1\0\1\126\5\0"+
    "\2\122\1\124\5\122\1\125\3\122\1\125\10\122\27\0"+
    "\2\122\7\0\1\27\101\0\5\21\1\127\1\130\102\21"+
    "\5\0\1\131\1\0\1\22\16\0\2\132\1\22\1\132"+
    "\1\133\57\0\1\122\1\17\1\0\1\122\3\0\1\17"+
    "\1\134\1\122\1\135\1\123\1\136\1\17\1\137\1\17"+
    "\1\124\2\125\1\0\1\126\5\0\1\122\1\137\1\124"+
    "\4\122\1\136\1\125\2\122\1\135\1\125\3\122\1\134"+
    "\4\122\27\0\2\122\113\0\1\140\5\0\1\140\5\0"+
    "\1\140\1\0\1\140\4\0\1\141\70\0\1\20\1\0"+
    "\1\22\16\0\4\27\1\133\110\0\1\142\40\0\1\143"+
    "\16\0\2\16\1\0\1\16\3\0\14\16\7\0\1\16"+
    "\1\144\3\16\1\145\2\16\1\146\14\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\6\16"+
    "\1\147\1\150\15\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\11\16\1\151\2\16\7\0\3\16\1\152"+
    "\10\16\1\153\10\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\1\154\3\16\1\155\5\16"+
    "\1\156\3\16\1\157\2\16\1\160\3\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\14\16"+
    "\1\161\10\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\7\16\1\162\15\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\163\3\0\14\16\7\0\15\16"+
    "\1\164\7\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\16\16\1\165\6\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\1\166"+
    "\24\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\14\16\1\167\10\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\170\3\0\14\16\7\0\4\16\1\171"+
    "\4\16\1\172\6\16\1\173\4\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\16\3\0\14\16\7\0\1\174\24\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\1\175\24\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\14\16\1\176\10\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\14\16\1\177\10\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\1\200\6\16\1\201\15\16"+
    "\27\0\2\16\31\0\1\202\31\0\1\203\111\0\1\204"+
    "\111\0\1\205\1\0\1\206\45\0\1\207\41\0\1\210"+
    "\3\0\1\211\105\0\1\212\110\0\1\213\110\0\1\214"+
    "\1\0\1\215\111\0\1\216\61\0\1\217\45\0\7\100"+
    "\1\0\63\100\1\0\15\100\32\0\1\220\57\0\1\122"+
    "\1\103\1\0\1\122\3\0\1\103\5\122\1\103\1\122"+
    "\1\103\1\122\2\125\1\0\1\126\5\0\10\122\1\125"+
    "\3\122\1\125\10\122\27\0\2\122\2\0\1\140\5\0"+
    "\1\140\5\0\1\140\1\0\1\140\72\0\1\105\5\0"+
    "\1\105\5\0\1\105\1\0\1\105\1\0\2\221\17\0"+
    "\1\221\1\110\2\0\1\221\1\110\36\0\2\110\2\0"+
    "\1\222\5\0\1\222\5\0\1\222\1\0\1\222\3\0"+
    "\1\223\45\0\1\223\43\0\1\224\65\0\1\114\5\0"+
    "\1\114\5\0\1\114\1\0\1\114\1\0\2\225\1\226"+
    "\16\0\1\225\3\0\1\225\22\0\1\226\20\0\1\114"+
    "\5\0\1\114\5\0\1\114\1\0\1\114\72\0\1\116"+
    "\5\0\1\116\5\0\1\116\1\0\1\116\1\0\2\227"+
    "\1\230\16\0\1\227\3\0\1\227\22\0\1\230\20\0"+
    "\1\116\5\0\1\116\5\0\1\116\1\0\1\116\72\0"+
    "\1\121\5\0\1\121\5\0\1\121\1\0\1\121\4\0"+
    "\1\231\64\0\2\122\1\0\1\122\3\0\12\122\2\232"+
    "\1\0\1\122\5\0\10\122\1\232\3\122\1\232\10\122"+
    "\27\0\2\122\1\0\1\122\1\123\1\0\1\122\3\0"+
    "\1\123\3\122\1\123\1\122\1\123\1\122\1\123\1\122"+
    "\2\232\1\0\1\122\5\0\10\122\1\232\3\122\1\232"+
    "\10\122\27\0\2\122\1\0\1\122\1\123\1\0\1\122"+
    "\3\0\1\233\3\122\1\123\1\122\1\123\1\122\1\123"+
    "\1\122\2\232\1\0\1\122\5\0\10\122\1\232\3\122"+
    "\1\232\10\122\27\0\2\122\1\0\1\122\1\234\1\0"+
    "\1\122\3\0\1\234\5\122\1\234\1\122\1\234\1\122"+
    "\2\232\1\235\1\122\5\0\10\122\1\232\3\122\1\232"+
    "\10\122\12\0\1\235\14\0\2\122\1\0\1\122\1\140"+
    "\1\0\1\122\3\0\1\140\5\122\1\140\1\122\1\140"+
    "\1\122\2\236\1\0\1\237\5\0\10\122\1\236\1\240"+
    "\2\122\1\236\1\240\7\122\27\0\2\240\3\0\5\21"+
    "\26\0\2\21\44\0\1\21\13\0\1\132\106\0\1\131"+
    "\20\0\4\132\111\0\1\142\57\0\1\122\1\241\1\0"+
    "\1\122\3\0\1\241\1\122\3\241\1\122\3\241\1\122"+
    "\1\242\1\232\1\0\1\122\5\0\2\241\3\122\1\241"+
    "\2\122\1\232\2\122\1\241\1\242\1\241\7\122\27\0"+
    "\1\122\1\241\1\0\2\122\1\0\1\122\3\0\1\243"+
    "\3\122\1\243\1\122\1\243\1\122\1\243\1\122\2\232"+
    "\1\0\1\122\5\0\10\122\1\232\3\122\1\232\10\122"+
    "\27\0\2\122\1\0\2\122\1\0\1\122\3\0\1\244"+
    "\3\122\1\244\3\122\1\244\1\122\2\232\1\0\1\122"+
    "\5\0\10\122\1\232\3\122\1\232\10\122\27\0\2\122"+
    "\1\0\1\122\1\140\1\0\1\122\3\0\1\140\5\122"+
    "\1\140\1\122\1\140\1\122\2\245\1\0\1\122\5\0"+
    "\10\122\1\245\1\246\2\122\1\245\1\246\7\122\27\0"+
    "\2\246\7\142\1\22\20\142\1\22\60\142\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\2\16\1\247\22\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\3\16\1\250\21\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\10\16\1\251\14\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\3\16\1\252\21\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\7\16\1\253\15\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\6\16\1\254\16\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\1\255\3\16\1\256"+
    "\20\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\11\16\1\257\13\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\16\3\0\14\16\7\0\1\16\1\260"+
    "\23\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\1\261\15\16\1\262\6\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\10\16"+
    "\1\263\14\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\10\16\1\264\14\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\6\16"+
    "\1\265\16\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\3\16\1\266\21\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\267\3\0\14\16\7\0\25\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\3\16\1\270\3\16\1\271\15\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\3\16"+
    "\1\272\21\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\4\16\1\273\1\274\17\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\15\16\1\275\7\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\3\16\1\276\12\16\1\277"+
    "\6\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\4\16\1\300\20\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\16\3\0\14\16\7\0\2\16\1\301"+
    "\22\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\3\16\1\302\2\16\1\303\16\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\11\16\1\304\13\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\3\16\1\305\21\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\1\306\24\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\12\16\1\307\12\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\4\16"+
    "\1\310\4\16\1\311\13\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\6\16\1\312\16\16"+
    "\27\0\2\16\2\0\1\313\5\0\1\313\5\0\1\313"+
    "\1\0\1\313\154\0\1\314\112\0\1\315\110\0\1\316"+
    "\61\0\1\317\53\0\1\222\5\0\1\222\5\0\1\222"+
    "\1\0\1\222\23\0\1\110\3\0\1\110\36\0\2\110"+
    "\2\0\1\222\5\0\1\222\5\0\1\222\1\0\1\222"+
    "\72\0\1\320\5\0\1\320\5\0\1\320\1\0\1\320"+
    "\112\0\2\225\17\0\1\225\3\0\1\225\63\0\2\227"+
    "\17\0\1\227\3\0\1\227\66\0\1\227\64\0\2\122"+
    "\1\0\1\122\3\0\12\122\2\232\1\321\1\122\5\0"+
    "\10\122\1\232\3\122\1\232\10\122\12\0\1\321\14\0"+
    "\2\122\1\0\1\122\1\123\1\0\1\122\3\0\1\123"+
    "\1\134\1\122\1\135\1\123\1\136\1\123\1\137\1\123"+
    "\1\122\2\232\1\0\1\122\5\0\1\122\1\137\5\122"+
    "\1\136\1\232\2\122\1\135\1\232\3\122\1\134\4\122"+
    "\27\0\2\122\1\0\1\122\1\234\1\0\1\122\3\0"+
    "\1\234\5\122\1\234\1\122\1\234\1\122\2\232\1\0"+
    "\1\122\5\0\10\122\1\232\1\322\2\122\1\232\1\322"+
    "\7\122\27\0\2\322\2\0\1\234\5\0\1\234\5\0"+
    "\1\234\1\0\1\234\71\0\1\122\1\323\1\0\1\122"+
    "\3\0\1\323\5\122\1\323\1\122\1\323\1\122\2\232"+
    "\1\324\1\122\5\0\10\122\1\232\3\122\1\232\10\122"+
    "\12\0\1\324\14\0\2\122\1\0\1\122\1\325\1\0"+
    "\1\122\3\0\1\325\5\122\1\325\1\122\1\325\1\122"+
    "\2\232\1\0\1\122\5\0\10\122\1\232\3\122\1\232"+
    "\10\122\27\0\2\122\1\0\1\122\1\241\1\0\1\122"+
    "\3\0\1\241\1\122\3\241\1\122\3\241\1\122\1\242"+
    "\1\232\1\321\1\122\5\0\2\241\3\122\1\241\2\122"+
    "\1\232\2\122\1\241\1\242\1\241\7\122\12\0\1\321"+
    "\14\0\1\122\1\241\1\0\1\122\1\326\1\0\1\122"+
    "\3\0\1\326\5\122\1\326\1\122\1\326\1\122\2\232"+
    "\1\327\1\122\5\0\10\122\1\232\3\122\1\232\10\122"+
    "\12\0\1\327\14\0\2\122\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\3\16\1\330\21\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\6\16"+
    "\1\331\16\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\11\16\1\332\13\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\11\16"+
    "\1\333\13\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\3\16\1\334\21\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\3\16"+
    "\1\335\21\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\6\16\1\336\7\16\1\337\6\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\14\16\1\340\10\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\11\16\1\341\13\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\342\3\0\14\16"+
    "\7\0\25\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\14\16\1\343\10\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\14\16"+
    "\1\344\10\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\11\16\1\345\13\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\2\16"+
    "\1\346\22\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\16\16\1\347\6\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\2\16"+
    "\1\350\1\351\21\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\16\16\1\352\6\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\2\16\1\353\22\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\22\16\1\354\2\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\1\355\24\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\4\16\1\356\20\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\17\16"+
    "\1\357\5\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\7\16\1\360\15\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\14\16"+
    "\1\361\10\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\14\16\1\362\10\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\3\16"+
    "\1\363\21\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\2\16\1\364\22\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\5\16"+
    "\1\365\17\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\13\16\1\366\11\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\1\16"+
    "\1\367\23\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\16\16\1\370\6\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\13\16"+
    "\1\371\11\16\27\0\2\16\2\0\1\313\3\0\1\372"+
    "\1\0\1\313\5\0\1\313\1\0\1\313\10\0\1\373"+
    "\112\0\1\374\57\0\1\122\5\0\1\122\5\0\1\122"+
    "\1\0\1\122\71\0\1\122\1\323\1\0\1\122\3\0"+
    "\1\323\5\122\1\323\1\122\1\323\1\122\2\232\1\0"+
    "\1\122\5\0\10\122\1\232\1\240\2\122\1\232\1\240"+
    "\7\122\27\0\2\240\2\0\1\323\5\0\1\323\5\0"+
    "\1\323\1\0\1\323\71\0\1\122\1\326\1\0\1\122"+
    "\3\0\1\326\5\122\1\326\1\122\1\326\1\122\2\232"+
    "\1\0\1\122\5\0\10\122\1\232\1\246\2\122\1\232"+
    "\1\246\7\122\27\0\2\246\2\0\1\326\5\0\1\326"+
    "\5\0\1\326\1\0\1\326\71\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\4\16\1\375\20\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\7\16"+
    "\1\376\15\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\12\16\1\377\12\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\16\3\0\14\16\7\0\5\16"+
    "\1\u0100\17\16\27\0\2\16\1\0\2\16\1\0\1\16"+
    "\3\0\14\16\7\0\14\16\1\u0101\10\16\27\0\2\16"+
    "\1\0\2\16\1\0\1\u0102\3\0\14\16\7\0\25\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\5\16\1\u0103\17\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\5\16\1\u0104\17\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\14\16\1\u0105\10\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\2\16\1\u0106\22\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\13\16\1\u0107\11\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\14\16\1\u0108\10\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\4\16\1\u0109\20\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\3\16\1\u010a\21\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\4\16\1\u010b\20\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\3\16\1\u010c\21\16"+
    "\27\0\2\16\1\0\2\16\1\0\1\16\3\0\14\16"+
    "\7\0\14\16\1\u010d\10\16\27\0\2\16\1\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\1\u010e\24\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\16\16\1\u010f\6\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\6\16\1\u0110\16\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\4\16\1\u0111\20\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\4\16\1\u0112\20\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\14\16\1\u0113\10\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\21\16\1\u0114\3\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\14\16\1\u0115\10\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\6\16\1\u0116\16\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\14\16\1\u0117\10\16\27\0\2\16\6\372\1\u0118\102\372"+
    "\6\0\1\372\22\0\1\373\135\0\1\u0119\33\0\2\16"+
    "\1\0\1\16\3\0\14\16\7\0\1\u011a\24\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\u011b\3\0\14\16\7\0"+
    "\25\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\21\16\1\u011c\3\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\16\3\0\14\16\7\0\23\16\1\u011d"+
    "\1\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\3\16\1\u011e\21\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\16\3\0\14\16\7\0\3\16\1\u011f"+
    "\21\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\6\16\1\u0120\16\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\16\3\0\14\16\7\0\14\16\1\u0121"+
    "\10\16\27\0\2\16\1\0\2\16\1\0\1\u0122\3\0"+
    "\14\16\7\0\25\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\7\16\1\u0123\15\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\4\16\1\u0124\20\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\23\16\1\u0125\1\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\11\16\1\u0126\13\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\14\16\1\u0127\10\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\u0128\3\0\14\16\7\0"+
    "\25\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\4\16\1\u0129\7\16\7\0\25\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\16\3\0\14\16\7\0\4\16\1\u012a"+
    "\20\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\3\16\1\u012b\21\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\16\3\0\4\16\1\u012c\7\16\7\0"+
    "\25\16\27\0\2\16\2\0\1\u012d\5\0\1\u012d\5\0"+
    "\1\u012d\1\0\1\u012d\5\0\1\u0118\2\0\1\u0118\131\0"+
    "\1\u012e\37\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\5\16\1\u012f\17\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\2\16\1\u0130\22\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\3\16\1\u0131\21\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\15\16\1\u0132\7\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\11\16\1\u0133\13\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\14\16\1\u0134\10\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\3\16\1\u0135\21\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\2\16\1\u0136\22\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\22\16\1\u0137\2\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\4\16\1\u0138\7\16\7\0\25\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\2\16\1\u0139\22\16\27\0\2\16\2\0\1\u012d\5\0"+
    "\1\u012d\5\0\1\u012d\1\0\1\u012d\10\0\1\u012d\112\0"+
    "\1\u013a\56\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\3\16\1\u013b\21\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\6\16\1\u013c\16\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\6\16\1\u013d\16\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\16\16\1\u013e\6\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\0\14\16\7\0"+
    "\14\16\1\u013f\10\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\7\16\1\u0140\15\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\u0141\3\0\14\16\7\0"+
    "\25\16\27\0\2\16\1\0\2\16\1\0\1\u0142\3\0"+
    "\14\16\7\0\25\16\27\0\2\16\1\0\2\16\1\0"+
    "\1\16\3\0\14\16\7\0\3\16\1\u0143\21\16\27\0"+
    "\2\16\1\0\2\16\1\0\1\u0144\3\0\14\16\7\0"+
    "\25\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\13\16\1\u0145\11\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\16\3\0\14\16\7\0\6\16\1\u0146"+
    "\16\16\27\0\2\16\1\0\2\16\1\0\1\16\3\0"+
    "\14\16\7\0\7\16\1\u0147\15\16\27\0\2\16\1\0"+
    "\2\16\1\0\1\u0148\3\0\14\16\7\0\25\16\27\0"+
    "\2\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17447];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\5\0\1\1\2\0\2\1\2\0\3\1"+
    "\1\11\23\1\3\11\10\1\13\11\2\1\1\11\2\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\11"+
    "\1\1\2\0\2\1\1\0\5\1\1\0\1\11\1\0"+
    "\1\1\1\0\5\1\1\11\1\0\1\11\36\1\1\0"+
    "\1\11\1\1\2\11\1\0\1\11\1\0\5\11\1\0"+
    "\1\11\1\0\1\1\1\0\1\11\2\0\1\11\2\0"+
    "\3\1\1\0\55\1\1\0\3\11\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\42\1\3\0\34\1\1\0"+
    "\24\1\1\0\13\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */


  private StringBuilder comment = null;


  private boolean commentnl = false;


  private String fileName = null;


  private StringBuilder float_num = null;

  private int saveState = 0;


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  P4Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  P4Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Syntax yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.AT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 105: break;
        case 41: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.RANGE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 106: break;
        case 42: 
          { yybegin(COMMENT);
comment = new StringBuilder();
comment.append(yytext());
commentnl = false;
          }
        case 107: break;
        case 37: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.INTEGER, yytext());
      syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
      yybegin(YYINITIAL);
      return syntax;
          }
        case 108: break;
        case 81: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.FALSE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 109: break;
        case 50: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 110: break;
        case 2: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.IDENTIFIER, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 111: break;
        case 19: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_ANGLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 112: break;
        case 66: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BOOL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 113: break;
        case 71: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ELSE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 114: break;
        case 23: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BIT_XOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 115: break;
        case 70: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ENUM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 116: break;
        case 43: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.IN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 117: break;
        case 92: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.VARBIT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 118: break;
        case 83: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ACTION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 119: break;
        case 102: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TRANSITION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 120: break;
        case 38: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 10;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(PP_FRACTION_CAN_BE_EMPTY);
  float_num = new StringBuilder();
  float_num.append(yytext());
          }
        case 121: break;
        case 96: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PACKAGE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 122: break;
        case 100: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ABSTRACT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 123: break;
        case 17: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ASSIGN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 124: break;
        case 25: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.L_BRACKET); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 125: break;
        case 94: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TYPEDEF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 126: break;
        case 89: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PARSER); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 127: break;
        case 78: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.CONST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 128: break;
        case 36: 
          { yybegin(YYINITIAL);
    Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.FLOATING_CONSTANT, float_num.toString());
    syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
    return syntax;
          }
        case 129: break;
        case 88: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.RETURN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 130: break;
        case 51: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.NE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 131: break;
        case 91: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.HEADER); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 132: break;
        case 33: 
          { comment.append(yytext());
          }
        case 133: break;
        case 98: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ENTRIES); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 134: break;
        case 22: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MOD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 135: break;
        case 75: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.STATE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 136: break;
        case 9: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DIV); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 137: break;
        case 12: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.COMMA); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 138: break;
        case 53: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_ANGLE_SHIFT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 139: break;
        case 63: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MINUS_SAT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 140: break;
        case 45: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DHASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 141: break;
        case 56: 
          { yybegin(RANGE_END);
    Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.RANGE);
    syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1));
    return syntax;
          }
        case 142: break;
        case 104: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.HEADER_UNION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 143: break;
        case 62: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MASK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 144: break;
        case 55: 
          { comment.append(yytext()); yybegin(YYINITIAL);
return new Layout(comment.toString(), false);
          }
        case 145: break;
        case 57: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.FLOATING_CONSTANT, yytext());
  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
          }
        case 146: break;
        case 60: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.OUT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 147: break;
        case 87: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.SELECT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 148: break;
        case 3: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.INTEGER, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 149: break;
        case 59: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.INT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 150: break;
        case 61: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.KEY); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 151: break;
        case 52: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.GE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 152: break;
        case 14: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BIT_AND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 153: break;
        case 20: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PLUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 154: break;
        case 39: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.STRING_LITERAL, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 155: break;
        case 65: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 11;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(RANGE_DOTS);
  Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.INTEGER, yytext());
  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
          }
        case 156: break;
        case 68: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TYPE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 157: break;
        case 67: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TRUE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 158: break;
        case 84: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.SWITCH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 159: break;
        case 95: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.CONTROL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 160: break;
        case 85: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.STRING); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 161: break;
        case 82: 
          { return new Layout(yytext(), true);
          }
        case 162: break;
        case 64: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PLUS_SAT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 163: break;
        case 5: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DONTCARE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 164: break;
        case 47: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.SHL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 165: break;
        case 18: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.NOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 166: break;
        case 77: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TUPLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 167: break;
        case 31: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.SEMICOLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 168: break;
        case 35: 
          { Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.PPNUM, yytext());
  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
          }
        case 169: break;
        case 30: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.QUESTION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 170: break;
        case 8: 
          { return new Layout(yytext(), false);
          }
        case 171: break;
        case 76: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.TABLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 172: break;
        case 16: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BIT_OR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 173: break;
        case 49: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.OR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 174: break;
        case 101: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.VALUESET); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 175: break;
        case 1: 
          { yybegin(YYINITIAL);
    float_num.append(yytext());
    Text<P4Tag> syntax = new Text<P4Tag>(P4Tag.FLOATING_CONSTANT, float_num.toString());
    syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
    return syntax;
          }
        case 176: break;
        case 26: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_BRACKET); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 177: break;
        case 10: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.L_PAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 178: break;
        case 29: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.COLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 179: break;
        case 48: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.LE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 180: break;
        case 27: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.L_BRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 181: break;
        case 4: 
          { if (saveState == PRAGMA_LINE) {
    for (int i = 0; i < yytext().length(); i++) {
        if (yytext().charAt(i) == '\n') {
          saveState = 0 ;
          Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.END_PRAGMA);
          syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1));
          return syntax;
        }
    }
  }
  return new Layout(yytext(), true);
          }
        case 182: break;
        case 69: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.THIS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 183: break;
        case 90: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.EXTERN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 184: break;
        case 13: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.HASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 185: break;
        case 40: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(PP_FRACTION_NON_EMPTY);
  float_num = new StringBuilder();
  float_num.append(yytext());
          }
        case 186: break;
        case 72: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.EXIT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 187: break;
        case 79: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.INOUT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 188: break;
        case 7: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 189: break;
        case 80: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ERROR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 190: break;
        case 24: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.COMPLEMENT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 191: break;
        case 86: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.STRUCT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 192: break;
        case 97: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.DEFAULT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 193: break;
        case 74: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.APPLY); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 194: break;
        case 15: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.L_ANGLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 195: break;
        case 11: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_PAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 196: break;
        case 46: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.AND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 197: break;
        case 54: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PP); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 198: break;
        case 6: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MINUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 199: break;
        case 93: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.ACTIONS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 200: break;
        case 58: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.BIT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 201: break;
        case 103: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MATCH_KIND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 202: break;
        case 73: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.VOID); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 203: break;
        case 21: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.MUL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 204: break;
        case 99: 
          { saveState = PRAGMA_LINE;
                  yybegin(YYINITIAL);
                  Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.PRAGMA);
                  syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1));
                  return syntax;
          }
        case 205: break;
        case 34: 
          { comment.append(yytext()); commentnl = true;
          }
        case 206: break;
        case 28: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.R_BRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 207: break;
        case 44: 
          { Language<P4Tag> syntax = new Language<P4Tag>(P4Tag.IF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 208: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   EOF syntax = new EOF();

  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
