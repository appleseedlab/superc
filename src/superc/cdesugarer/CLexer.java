/* The following code was generated by JFlex 1.4.3 on 8/26/20, 11:05 AM */

package superc.cdesugarer;

import xtc.tree.Location;

import superc.core.Syntax;
import superc.core.Syntax.Language;
import superc.core.Syntax.PreprocessorTag;
import superc.core.Syntax.Text;
import superc.core.Syntax.Layout;
import superc.core.Syntax.EOF;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/26/20, 11:05 AM from the specification file
 * <tt>lexer.l.i</tt>
 */
class CLexer implements superc.core.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\27\1\32\1\33\1\34\22\0\1\32\1\71\1\31"+
    "\1\102\1\113\1\75\1\72\1\30\1\77\1\100\1\74\1\5\1\101"+
    "\1\65\1\6\1\35\1\2\1\62\1\63\5\15\1\64\1\14\1\110"+
    "\1\111\1\67\1\70\1\66\1\20\1\112\1\17\1\60\1\61\1\17"+
    "\1\3\1\7\5\1\1\11\3\1\1\4\4\1\1\13\2\1\1\16"+
    "\2\1\1\105\1\26\1\106\1\76\1\57\1\0\1\36\1\24\1\43"+
    "\1\50\1\22\1\23\1\52\1\45\1\47\1\1\1\42\1\12\1\51"+
    "\1\46\1\40\1\56\1\1\1\41\1\44\1\37\1\10\1\21\1\54"+
    "\1\25\1\55\1\53\1\103\1\73\1\104\1\107\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\3\1\1\5\1\6"+
    "\4\1\1\7\1\10\2\0\1\11\1\12\1\13\12\1"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\43\1\45\1\2\1\45\1\46\4\2\2\45"+
    "\1\47\1\50\1\0\2\1\4\5\7\1\1\0\1\10"+
    "\4\0\1\51\2\0\1\52\1\53\13\1\1\54\2\1"+
    "\1\55\5\1\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\45\1\46\1\0\1\46"+
    "\4\2\2\100\1\101\3\1\4\5\6\1\1\102\1\1"+
    "\1\103\2\0\1\1\1\104\15\1\1\105\20\1\1\106"+
    "\1\107\1\0\4\100\2\1\1\110\1\1\1\111\1\112"+
    "\1\1\1\113\2\1\1\114\3\1\1\115\2\1\1\116"+
    "\11\1\1\117\20\1\4\100\1\1\1\120\2\1\1\121"+
    "\1\122\5\1\1\123\2\1\1\124\6\1\1\125\6\1"+
    "\1\126\10\1\1\127\3\1\1\130\1\131\1\1\1\132"+
    "\2\1\1\133\1\134\1\135\1\136\1\137\1\140\1\1"+
    "\1\141\22\1\1\142\2\1\1\143\6\1\1\144\3\1"+
    "\1\145\5\1\1\146\1\147\1\150\1\151\6\1\1\152"+
    "\1\153\3\1\1\154\1\155\1\156\1\157\1\160\3\1"+
    "\1\161\3\1\1\162\3\1\1\163\4\1\1\164\1\165"+
    "\1\1\1\166\1\167\5\1\1\170\1\171\1\1\1\172"+
    "\1\173\5\1\1\174\1\175\3\1\1\176\11\1\1\177"+
    "\2\1\1\200\3\1\1\201\11\1\1\202";

  private static int [] zzUnpackAction() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474"+
    "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u02f8\0\u05f0\0\u063c\0\u0688"+
    "\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8"+
    "\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48"+
    "\0\u0b94\0\u0be0\0\u02f8\0\u02f8\0\u02f8\0\u0c2c\0\u02f8\0\u02f8"+
    "\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u0c78"+
    "\0\u02f8\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8\0\u0df4\0\u0e40\0\u0e8c"+
    "\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u02f8\0\u02f8\0\u1008\0\u1054"+
    "\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4"+
    "\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514"+
    "\0\u1560\0\u15ac\0\u02f8\0\u0474\0\u15f8\0\u02f8\0\u02f8\0\u1644"+
    "\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4"+
    "\0\u18f0\0\u193c\0\230\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8"+
    "\0\u1b04\0\u1b50\0\u1b9c\0\u02f8\0\u02f8\0\u02f8\0\u1be8\0\u02f8"+
    "\0\u1c34\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u02f8"+
    "\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u1c80\0\u1ccc\0\u1d18"+
    "\0\u0d10\0\u0d10\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u02f8"+
    "\0\u1ee0\0\u1f2c\0\u1f78\0\u0d10\0\u1fc4\0\u2010\0\u205c\0\u20a8"+
    "\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\230\0\u2270\0\u02f8"+
    "\0\u22bc\0\u2308\0\u2354\0\230\0\u23a0\0\u23ec\0\u2438\0\u2484"+
    "\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4"+
    "\0\u2730\0\230\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8"+
    "\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58"+
    "\0\u2ba4\0\u2bf0\0\u02f8\0\u02f8\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20"+
    "\0\u2d6c\0\u2db8\0\u2e04\0\230\0\u2e50\0\230\0\230\0\u2e9c"+
    "\0\230\0\u2ee8\0\u2f34\0\230\0\u2f80\0\u2fcc\0\u3018\0\230"+
    "\0\u3064\0\u30b0\0\230\0\u30fc\0\u3148\0\u3194\0\u31e0\0\u322c"+
    "\0\u3278\0\u32c4\0\u3310\0\u335c\0\230\0\u33a8\0\u33f4\0\u3440"+
    "\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0"+
    "\0\u36ec\0\u3738\0\u3784\0\u37d0\0\u381c\0\u0d10\0\u3868\0\u38b4"+
    "\0\u3900\0\u394c\0\230\0\u3998\0\u39e4\0\230\0\230\0\u3a30"+
    "\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\230\0\u3bac\0\u3bf8\0\230"+
    "\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0\0\230\0\u3e0c"+
    "\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u406c"+
    "\0\u40b8\0\u4104\0\u4150\0\u419c\0\u41e8\0\u4234\0\230\0\u4280"+
    "\0\u42cc\0\u4318\0\230\0\230\0\u4364\0\230\0\u43b0\0\u43fc"+
    "\0\230\0\230\0\230\0\230\0\230\0\230\0\u4448\0\230"+
    "\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4\0\u4610\0\u465c\0\u46a8"+
    "\0\u46f4\0\u4740\0\u478c\0\u47d8\0\u4824\0\u4870\0\u48bc\0\u4908"+
    "\0\u4954\0\u49a0\0\230\0\u49ec\0\u4a38\0\230\0\u4a84\0\u4ad0"+
    "\0\u4b1c\0\u4b68\0\u4bb4\0\u4c00\0\230\0\u4c4c\0\u4c98\0\u4ce4"+
    "\0\u4d30\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\230\0\230"+
    "\0\230\0\230\0\u4ef8\0\u4f44\0\u4f90\0\u4fdc\0\u5028\0\u5074"+
    "\0\230\0\u50c0\0\u510c\0\u5158\0\u51a4\0\u51f0\0\u523c\0\230"+
    "\0\230\0\230\0\u5288\0\u52d4\0\u5320\0\u536c\0\u53b8\0\u5404"+
    "\0\u5450\0\230\0\u549c\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u5618"+
    "\0\u5664\0\u56b0\0\230\0\u56fc\0\u5748\0\230\0\230\0\u5794"+
    "\0\u57e0\0\u582c\0\u5878\0\u58c4\0\230\0\u5910\0\u595c\0\230"+
    "\0\230\0\u59a8\0\u59f4\0\u5a40\0\u5a8c\0\u5ad8\0\230\0\230"+
    "\0\u5b24\0\u5b70\0\u5bbc\0\230\0\u5c08\0\u5c54\0\u5ca0\0\u5cec"+
    "\0\u5d38\0\u5d84\0\u5dd0\0\u5e1c\0\u5e68\0\230\0\u5eb4\0\u5f00"+
    "\0\230\0\u5f4c\0\u5f98\0\u5fe4\0\230\0\u6030\0\u607c\0\u60c8"+
    "\0\u6114\0\u6160\0\u61ac\0\u61f8\0\u6244\0\u6290\0\230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\2\3\1\5\1\6\1\3\1\7"+
    "\1\10\1\11\1\3\2\12\2\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\3\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\24\1\26\1\27\1\30\1\3\1\31\1\3"+
    "\1\32\1\33\2\3\1\34\1\35\1\3\1\36\1\3"+
    "\1\37\2\3\1\40\2\3\3\12\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\27\70\1\71\44\70\1\72"+
    "\17\70\1\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\27\3\30\0\1\73\1\74\2\75\1\0\1\76\1\73"+
    "\1\77\1\100\1\101\1\102\1\103\1\74\1\104\1\73"+
    "\1\0\1\73\1\75\2\73\1\104\10\0\20\73\1\75"+
    "\3\73\2\74\1\103\34\0\1\105\62\0\1\106\25\0"+
    "\1\76\3\0\1\107\5\0\2\76\44\0\3\76\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\10\3\1\110"+
    "\16\3\30\0\4\3\2\0\11\3\1\0\5\3\2\0"+
    "\1\22\1\23\4\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\2\3\1\111\24\3\30\0\1\73"+
    "\1\12\2\75\1\0\1\76\1\73\1\112\1\113\1\114"+
    "\1\115\2\12\2\73\1\0\1\73\1\75\3\73\10\0"+
    "\20\73\1\75\3\73\3\12\144\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\2\3\1\116\24\3\30\0\4\3"+
    "\2\0\3\3\1\117\5\3\1\0\4\3\1\120\10\0"+
    "\10\3\1\121\16\3\30\0\4\3\2\0\3\3\1\122"+
    "\5\3\1\0\5\3\10\0\2\3\1\123\24\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\3\3\1\124"+
    "\23\3\56\0\1\24\112\0\1\125\1\21\2\0\1\126"+
    "\1\0\1\21\1\127\56\0\26\130\1\131\2\0\63\130"+
    "\26\23\1\132\1\0\1\23\1\133\62\23\26\0\1\134"+
    "\1\21\2\0\1\24\1\0\1\24\1\127\113\0\1\135"+
    "\32\0\1\136\3\0\1\137\20\0\4\3\2\0\1\3"+
    "\1\140\7\3\1\0\5\3\10\0\6\3\1\141\20\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\17\3"+
    "\1\142\7\3\30\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\143\3\3\10\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\144\1\3\1\145\4\3\1\146"+
    "\17\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\3\1\147\5\3\1\150\1\3\1\151\4\3\1\152"+
    "\10\3\30\0\4\3\2\0\11\3\1\0\2\3\1\153"+
    "\2\3\10\0\10\3\1\154\16\3\30\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\155\3\3\10\0\2\3\1\156"+
    "\24\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\2\3\1\157\24\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\7\3\1\160\17\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\21\3\1\161\1\162\1\163"+
    "\3\3\114\0\1\164\1\165\1\0\1\166\111\0\1\167"+
    "\1\0\1\170\112\0\1\171\1\172\113\0\1\173\113\0"+
    "\1\174\113\0\1\175\1\0\1\176\111\0\1\177\2\0"+
    "\1\200\110\0\1\201\113\0\1\202\113\0\1\203\125\0"+
    "\1\204\11\0\27\70\1\0\44\70\1\0\17\70\35\0"+
    "\1\205\57\0\2\73\2\206\1\0\12\73\1\0\1\73"+
    "\1\206\3\73\10\0\20\73\1\206\6\73\30\0\1\73"+
    "\1\74\2\75\1\0\1\76\1\73\1\77\1\100\1\101"+
    "\1\102\1\103\1\74\2\73\1\0\1\73\1\75\3\73"+
    "\10\0\20\73\1\75\3\73\2\74\1\103\30\0\1\73"+
    "\1\207\2\206\1\210\6\73\2\207\2\73\1\0\1\73"+
    "\1\206\3\73\10\0\20\73\1\206\3\73\3\207\1\210"+
    "\27\0\1\73\1\76\2\75\1\0\1\73\1\211\1\73"+
    "\2\211\1\73\2\76\2\73\1\0\1\73\1\75\1\211"+
    "\2\73\10\0\20\73\1\75\3\73\3\76\30\0\2\73"+
    "\2\206\1\0\2\73\1\212\1\213\1\214\5\73\1\0"+
    "\1\73\1\206\3\73\10\0\20\73\1\206\6\73\30\0"+
    "\2\73\2\206\1\0\2\73\1\212\1\215\1\73\1\212"+
    "\4\73\1\0\1\73\1\206\3\73\10\0\20\73\1\206"+
    "\6\73\30\0\2\73\2\206\1\0\2\73\1\212\1\73"+
    "\1\215\1\212\4\73\1\0\1\73\1\206\3\73\10\0"+
    "\20\73\1\206\6\73\30\0\2\73\2\206\1\0\3\73"+
    "\1\213\1\214\1\212\4\73\1\0\1\73\1\206\3\73"+
    "\10\0\20\73\1\206\6\73\30\0\1\73\1\103\2\75"+
    "\1\0\1\76\5\73\2\103\2\73\1\0\1\73\1\75"+
    "\3\73\10\0\20\73\1\75\3\73\3\103\30\0\1\73"+
    "\1\216\1\217\1\206\1\0\1\73\1\216\4\73\2\216"+
    "\1\73\1\216\1\0\1\73\1\217\2\216\1\73\10\0"+
    "\1\216\4\73\1\216\4\73\1\216\5\73\1\206\1\73"+
    "\5\216\35\0\1\220\106\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\6\3\1\221\2\3\1\222\15\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\10\3\1\223"+
    "\16\3\30\0\2\73\2\206\1\0\2\73\1\224\1\225"+
    "\1\226\5\73\1\0\1\73\1\206\3\73\10\0\20\73"+
    "\1\206\6\73\30\0\2\73\2\206\1\0\2\73\1\224"+
    "\1\227\1\73\1\224\4\73\1\0\1\73\1\206\3\73"+
    "\10\0\20\73\1\206\6\73\30\0\2\73\2\206\1\0"+
    "\2\73\1\224\1\73\1\227\1\224\4\73\1\0\1\73"+
    "\1\206\3\73\10\0\20\73\1\206\6\73\30\0\2\73"+
    "\2\206\1\0\3\73\1\225\1\226\1\224\4\73\1\0"+
    "\1\73\1\206\3\73\10\0\20\73\1\206\6\73\30\0"+
    "\4\3\2\0\3\3\1\230\5\3\1\0\5\3\10\0"+
    "\11\3\1\231\15\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\6\3\1\232\20\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\1\3\1\233\25\3\30\0"+
    "\4\3\2\0\1\3\1\234\7\3\1\0\5\3\10\0"+
    "\27\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\2\3\1\235\24\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\3\3\1\236\23\3\30\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\237\3\3\10\0\27\3\56\0"+
    "\1\126\112\0\1\125\3\0\1\126\1\0\1\126\114\0"+
    "\1\135\56\0\26\130\1\131\1\0\1\240\63\130\2\0"+
    "\1\130\12\0\1\130\2\0\5\130\1\241\4\130\4\0"+
    "\2\130\1\0\1\130\4\0\1\130\13\0\2\130\32\0"+
    "\1\23\12\0\1\23\2\0\5\23\1\242\4\23\4\0"+
    "\2\23\1\0\1\23\4\0\1\23\13\0\2\23\30\0"+
    "\27\135\1\21\4\135\1\21\57\135\1\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\1\3\1\243\25\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\13\3\1\244"+
    "\13\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\20\3\1\245\6\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\3\1\246\12\3\1\247\12\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\6\3\1\250"+
    "\20\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\10\3\1\251\16\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\252\26\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\253\2\3\1\254\23\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\2\3\1\255"+
    "\24\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\14\3\1\256\1\257\11\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\11\3\1\260\15\3\30\0\4\3"+
    "\2\0\3\3\1\261\5\3\1\0\5\3\10\0\1\3"+
    "\1\262\25\3\30\0\4\3\2\0\11\3\1\0\2\3"+
    "\1\263\2\3\10\0\27\3\30\0\4\3\2\0\1\3"+
    "\1\264\7\3\1\0\5\3\10\0\27\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\3\1\265\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\11\3"+
    "\1\266\15\3\30\0\4\3\2\0\3\3\1\267\5\3"+
    "\1\0\1\270\1\271\1\3\1\272\1\3\10\0\1\273"+
    "\1\274\1\3\1\275\1\3\1\276\1\277\2\3\1\300"+
    "\15\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\2\3\1\301\24\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\2\3\1\302\24\3\117\0\1\303\113\0"+
    "\1\304\24\0\2\73\2\206\1\305\12\73\1\0\1\73"+
    "\1\206\3\73\10\0\20\73\1\206\6\73\1\305\27\0"+
    "\1\73\1\207\2\206\1\0\1\73\1\211\1\73\2\211"+
    "\1\73\2\207\2\73\1\0\1\73\1\206\1\211\2\73"+
    "\10\0\20\73\1\206\3\73\3\207\31\0\1\207\11\0"+
    "\2\207\44\0\3\207\30\0\2\73\2\206\1\0\3\73"+
    "\1\212\6\73\1\0\1\73\1\206\3\73\10\0\20\73"+
    "\1\206\6\73\30\0\2\73\2\206\1\0\4\73\1\212"+
    "\5\73\1\0\1\73\1\206\3\73\10\0\20\73\1\206"+
    "\6\73\30\0\2\73\2\206\1\0\2\73\1\212\2\73"+
    "\1\212\4\73\1\0\1\73\1\206\3\73\10\0\20\73"+
    "\1\206\6\73\30\0\1\73\1\216\1\217\1\206\1\0"+
    "\1\73\1\216\1\306\1\307\1\310\1\311\2\216\1\73"+
    "\1\216\1\0\1\73\1\217\2\216\1\73\10\0\1\216"+
    "\4\73\1\216\4\73\1\216\5\73\1\206\1\73\5\216"+
    "\30\0\1\73\1\216\1\217\1\206\1\305\1\73\1\216"+
    "\1\306\1\307\1\310\1\311\2\216\1\73\1\216\1\0"+
    "\1\73\1\217\2\216\1\73\10\0\1\216\4\73\1\216"+
    "\4\73\1\216\5\73\1\206\1\73\5\216\1\305\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\11\3\1\312"+
    "\15\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\2\3\1\313\24\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\14\3\1\314\12\3\30\0\2\73\2\206"+
    "\1\0\3\73\1\224\6\73\1\0\1\73\1\206\3\73"+
    "\10\0\20\73\1\206\6\73\30\0\2\73\2\206\1\0"+
    "\4\73\1\224\5\73\1\0\1\73\1\206\3\73\10\0"+
    "\20\73\1\206\6\73\30\0\2\73\2\206\1\0\2\73"+
    "\1\224\2\73\1\224\4\73\1\0\1\73\1\206\3\73"+
    "\10\0\20\73\1\206\6\73\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\315\26\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\12\3\1\316\14\3\30\0"+
    "\4\3\2\0\11\3\1\0\1\3\1\317\3\3\10\0"+
    "\27\3\30\0\4\3\2\0\11\3\1\0\1\3\1\320"+
    "\3\3\10\0\27\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\13\3\1\321\13\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\1\322\26\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\323\26\3\31\0"+
    "\2\130\3\0\1\130\4\0\2\130\1\0\1\130\2\0"+
    "\3\130\11\0\1\130\4\0\1\130\4\0\1\130\7\0"+
    "\5\130\31\0\2\23\3\0\1\23\4\0\2\23\1\0"+
    "\1\23\2\0\3\23\11\0\1\23\4\0\1\23\4\0"+
    "\1\23\7\0\5\23\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\2\3\1\324\24\3\30\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\325\3\3\10\0\27\3\30\0"+
    "\4\3\2\0\1\3\1\326\7\3\1\0\5\3\10\0"+
    "\27\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\11\3\1\327\15\3\30\0\4\3\2\0\11\3\1\0"+
    "\1\3\1\330\3\3\10\0\27\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\1\3\1\331\4\3\1\332"+
    "\20\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\3\3\1\333\23\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\3\1\334\25\3\30\0\4\3\2\0"+
    "\1\3\1\335\7\3\1\0\5\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\3\3\1\336"+
    "\23\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\10\3\1\337\16\3\30\0\4\3\2\0\11\3\1\0"+
    "\1\3\1\340\3\3\10\0\27\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\1\3\1\341\25\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\11\3\1\342"+
    "\15\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\343\26\3\30\0\4\3\2\0\11\3\1\0\3\3"+
    "\1\344\1\3\10\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\2\3\1\345\24\3\30\0\4\3"+
    "\2\0\3\3\1\346\5\3\1\0\5\3\10\0\27\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\1\347"+
    "\26\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\2\3\1\350\24\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\1\351\10\0\27\3\30\0\4\3\2\0\1\3"+
    "\1\352\7\3\1\0\5\3\10\0\27\3\30\0\4\3"+
    "\2\0\3\3\1\353\5\3\1\0\5\3\10\0\1\3"+
    "\1\354\4\3\1\355\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\356\7\3\1\357\7\3"+
    "\30\0\4\3\2\0\11\3\1\0\1\3\1\360\3\3"+
    "\10\0\27\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\2\3\1\361\24\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\11\3\1\362\15\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\10\3\1\363\16\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\2\3"+
    "\1\364\24\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\13\3\1\365\13\3\31\0\1\73\11\0\2\73"+
    "\44\0\3\73\30\0\2\73\2\206\1\0\2\73\1\366"+
    "\1\367\1\370\5\73\1\0\1\73\1\206\3\73\10\0"+
    "\20\73\1\206\6\73\30\0\2\73\2\206\1\0\2\73"+
    "\1\366\1\371\1\73\1\366\4\73\1\0\1\73\1\206"+
    "\3\73\10\0\20\73\1\206\6\73\30\0\2\73\2\206"+
    "\1\0\2\73\1\366\1\73\1\371\1\366\4\73\1\0"+
    "\1\73\1\206\3\73\10\0\20\73\1\206\6\73\30\0"+
    "\2\73\2\206\1\0\3\73\1\367\1\370\1\366\4\73"+
    "\1\0\1\73\1\206\3\73\10\0\20\73\1\206\6\73"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\14\3"+
    "\1\372\12\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\10\3\1\373\16\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\3\1\374\25\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\3\3\1\375\23\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\1\3"+
    "\1\376\25\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\4\3\1\377\22\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\2\3\1\u0100\7\3\1\u0101\14\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\3\3"+
    "\1\u0102\23\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\6\3\1\u0103\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\11\3\1\u0104\15\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\3\1\u0105\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\11\3"+
    "\1\u0106\15\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\5\3\1\u0107\21\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\3\1\u0108\25\3\30\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u0109\3\3\10\0\27\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\2\3"+
    "\1\u010a\24\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\5\3\1\u010b\21\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\10\3\1\u010c\16\3\30\0\4\3"+
    "\2\0\1\3\1\u010d\7\3\1\0\5\3\10\0\27\3"+
    "\30\0\4\3\2\0\3\3\1\u010e\5\3\1\0\5\3"+
    "\10\0\27\3\30\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u010f\3\3\10\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\3\3\1\u0110\1\3\10\0\27\3\30\0\4\3"+
    "\2\0\3\3\1\u0111\5\3\1\0\5\3\10\0\27\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\1\3"+
    "\1\u0112\25\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\11\3\1\u0113\15\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\11\3\1\u0114\15\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\3\1\u0115\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\13\3"+
    "\1\u0116\13\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\3\3\1\u0117\23\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\20\3\1\u0118\6\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\6\3\1\u0119\20\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\10\3"+
    "\1\u011a\2\3\1\u011b\13\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\14\3\1\u011c\12\3\30\0\4\3"+
    "\2\0\3\3\1\u011d\5\3\1\0\5\3\10\0\1\3"+
    "\1\u011e\25\3\30\0\4\3\2\0\3\3\1\u011f\5\3"+
    "\1\0\5\3\10\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\20\3\1\u0120\6\3\30\0\2\73"+
    "\2\206\1\0\3\73\1\366\6\73\1\0\1\73\1\206"+
    "\3\73\10\0\20\73\1\206\6\73\30\0\2\73\2\206"+
    "\1\0\4\73\1\366\5\73\1\0\1\73\1\206\3\73"+
    "\10\0\20\73\1\206\6\73\30\0\2\73\2\206\1\0"+
    "\2\73\1\366\2\73\1\366\4\73\1\0\1\73\1\206"+
    "\3\73\10\0\20\73\1\206\6\73\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\10\3\1\u0121\16\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\11\3\1\u0122"+
    "\15\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\10\3\1\u0123\16\3\30\0\4\3\2\0\11\3\1\0"+
    "\2\3\1\u0124\2\3\10\0\27\3\30\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u0125\3\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\10\3\1\u0126"+
    "\16\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\3\1\u0127\25\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\10\3\1\u0128\16\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\5\3\1\u0129\21\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\1\3\1\u012a"+
    "\25\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\12\3\1\u012b\14\3\30\0\4\3\2\0\11\3\1\0"+
    "\2\3\1\u012c\2\3\10\0\27\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\u012d\17\3\30\0"+
    "\4\3\2\0\11\3\1\0\1\3\1\u012e\3\3\10\0"+
    "\27\3\30\0\4\3\2\0\3\3\1\u012f\5\3\1\0"+
    "\5\3\10\0\27\3\30\0\4\3\2\0\11\3\1\0"+
    "\1\3\1\u0130\3\3\10\0\27\3\30\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u0131\3\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\1\u0132\26\3"+
    "\30\0\4\3\2\0\11\3\1\0\1\3\1\u0133\3\3"+
    "\10\0\27\3\30\0\4\3\2\0\3\3\1\u0134\5\3"+
    "\1\0\5\3\10\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\14\3\1\u0135\12\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\3\3\1\u0136\23\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\21\3"+
    "\1\u0137\5\3\30\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u0138\3\3\10\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\1\3\1\u0139\3\3\10\0\27\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\3\1\u013a\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\6\3"+
    "\1\u013b\20\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\20\3\1\u013c\6\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\10\3\1\u013d\16\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\11\3\1\u013e\15\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\24\3"+
    "\1\u013f\2\3\30\0\4\3\2\0\3\3\1\u0140\5\3"+
    "\1\0\5\3\10\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\1\3\1\u0141\3\3\10\0\27\3\30\0\4\3"+
    "\2\0\3\3\1\u0142\5\3\1\0\5\3\10\0\27\3"+
    "\30\0\4\3\2\0\11\3\1\0\2\3\1\u0143\2\3"+
    "\10\0\27\3\30\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u0144\3\3\10\0\27\3\30\0\4\3\2\0\1\3"+
    "\1\u0145\7\3\1\0\5\3\10\0\27\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\3\1\u0146\25\3"+
    "\30\0\4\3\2\0\3\3\1\u0147\5\3\1\0\5\3"+
    "\10\0\27\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\1\3\1\u0148\25\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\10\3\1\u0149\16\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\3\1\u014a\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\10\3"+
    "\1\u014b\16\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\11\3\1\u014c\15\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\21\3\1\u014d\5\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\u014e\26\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\2\3\1\u014f"+
    "\24\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\3\3\1\u0150\23\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\3\1\u0151\25\3\30\0\4\3\2\0"+
    "\3\3\1\u0152\5\3\1\0\5\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\1\3\1\u0153\3\3\10\0"+
    "\27\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\10\3\1\u0154\16\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\25\3\1\u0155\1\3\30\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u0156\3\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\12\3\1\u0157"+
    "\14\3\30\0\4\3\2\0\11\3\1\0\1\3\1\u0158"+
    "\3\3\10\0\27\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\3\3\1\u0159\23\3\30\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u015a\3\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\21\3\1\u015b"+
    "\5\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\11\3\1\u015c\15\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\6\3\1\u015d\20\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\11\3\1\u015e\15\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\2\3\1\u015f"+
    "\24\3\30\0\4\3\2\0\11\3\1\0\3\3\1\u0160"+
    "\1\3\10\0\27\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\12\3\1\u0161\14\3\30\0\4\3\2\0"+
    "\11\3\1\0\2\3\1\u0162\2\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\11\3\1\u0163"+
    "\15\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\21\3\1\u0164\5\3\30\0\4\3\2\0\11\3\1\0"+
    "\1\3\1\u0165\3\3\10\0\27\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\12\3\1\u0166\14\3\30\0"+
    "\4\3\2\0\11\3\1\0\1\3\1\u0167\3\3\10\0"+
    "\27\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\26\3\1\u0168\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\1\u0169\10\0\27\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\21\3\1\u016a\5\3\30\0\4\3\2\0"+
    "\3\3\1\u016b\5\3\1\0\5\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\11\3\1\u016c"+
    "\15\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\10\3\1\u016d\16\3\30\0\4\3\2\0\11\3\1\0"+
    "\2\3\1\u016e\2\3\10\0\27\3\30\0\4\3\2\0"+
    "\1\3\1\u016f\7\3\1\0\5\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\21\3\1\u0170"+
    "\5\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\5\3\1\u0171\21\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\21\3\1\u0172\5\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\1\u0173\10\0\27\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\21\3\1\u0174\5\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\21\3"+
    "\1\u0175\5\3\30\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u0176\3\3\10\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\2\3\1\u0177\24\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\21\3\1\u0178\5\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\21\3"+
    "\1\u0179\5\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\1\3\1\u017a\25\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\21\3\1\u017b\5\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\3\1\u017c\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\21\3"+
    "\1\u017d\5\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\21\3\1\u017e\5\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\21\3\1\u017f\5\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\21\3\1\u0180\5\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\10\3"+
    "\1\u0181\16\3\30\0\4\3\2\0\11\3\1\0\1\u0182"+
    "\4\3\10\0\1\3\1\u0183\1\u0184\24\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\21\3\1\u0185\5\3"+
    "\30\0\4\3\2\0\11\3\1\0\1\3\1\u0186\3\3"+
    "\10\0\27\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\21\3\1\u0187\5\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\21\3\1\u0188\5\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\21\3\1\u0189\5\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\21\3"+
    "\1\u018a\5\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\1\u018b\26\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\17\3\1\u018c\7\3\30\0\4\3\2\0"+
    "\11\3\1\0\2\3\1\u018d\2\3\10\0\27\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\21\3\1\u018e"+
    "\5\3\30\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\21\3\1\u018f\5\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\21\3\1\u0190\5\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\21\3\1\u0191\5\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\20\3\1\u0192"+
    "\6\3\30\0\4\3\2\0\11\3\1\0\2\3\1\u0193"+
    "\2\3\10\0\27\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\21\3\1\u0194\5\3\30\0\4\3\2\0"+
    "\3\3\1\u0195\5\3\1\0\5\3\10\0\1\u0196\26\3"+
    "\30\0\4\3\2\0\11\3\1\0\1\3\1\u0197\3\3"+
    "\10\0\27\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\6\3\1\u0198\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\11\3\1\u0199\15\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\3\3\1\u019a\23\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\6\3"+
    "\1\u019b\20\3\30\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u019c\3\3\10\0\27\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\6\3\1\u019d\20\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\14\3\1\u019e\12\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\21\3"+
    "\1\u019f\5\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\1\3\1\u01a0\25\3\30\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\3\1\u01a1\25\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\5\3\1\u01a2\21\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\2\3"+
    "\1\u01a3\24\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\2\3\1\u01a4\24\3\30\0\4\3\2\0\11\3"+
    "\1\0\2\3\1\u01a5\2\3\10\0\27\3\30\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\13\3\1\u01a6\13\3"+
    "\30\0\4\3\2\0\11\3\1\0\5\3\10\0\20\3"+
    "\1\u01a7\6\3\30\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\1\u01a8\26\3\30\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\3\1\u01a9\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\11\3\1\u01aa\15\3\30\0"+
    "\4\3\2\0\11\3\1\0\3\3\1\u01ab\1\3\10\0"+
    "\27\3\30\0\4\3\2\0\3\3\1\u01ac\5\3\1\0"+
    "\5\3\10\0\27\3\30\0\4\3\2\0\11\3\1\0"+
    "\1\3\1\u01ad\3\3\10\0\27\3\30\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\21\3\1\u01ae\5\3\30\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\20\3\1\u01af"+
    "\6\3\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25308];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\10\1\1\11\6\1\2\0\1\1\1\11\25\1"+
    "\3\11\1\1\11\11\1\1\1\11\13\1\2\11\1\0"+
    "\15\1\1\0\1\1\4\0\1\11\2\0\2\11\24\1"+
    "\3\11\1\1\1\11\1\1\14\11\2\1\1\0\7\1"+
    "\1\11\17\1\1\11\2\0\40\1\2\11\1\0\352\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  private StringBuilder comment = null;


  private boolean commentnl = false;


  private String fileName = null;


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Syntax yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 97: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DOUBLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 131: break;
        case 23: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RPAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 132: break;
        case 92: 
          { Language<CTag> syntax = new Language<CTag>(CTag.STRUCT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 133: break;
        case 27: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RBRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 134: break;
        case 110: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__INT128); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 135: break;
        case 2: 
          { Text<CTag> syntax = new Text<CTag>(CTag.OCTALconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 136: break;
        case 66: 
          { Language<CTag> syntax = new Language<CTag>(CTag.FOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 137: break;
        case 43: 
          { yybegin(COMMENT);
comment = new StringBuilder();
comment.append(yytext());
commentnl = false;
          }
        case 138: break;
        case 126: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ATTRIBUTE__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 139: break;
        case 54: 
          { Language<CTag> syntax = new Language<CTag>(CTag.NE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 140: break;
        case 11: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DIV); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 141: break;
        case 22: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LPAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 142: break;
        case 26: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LBRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 143: break;
        case 61: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ERassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 144: break;
        case 29: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RBRACK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 145: break;
        case 32: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SEMICOLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 146: break;
        case 20: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MOD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 147: break;
        case 105: 
          { Language<CTag> syntax = new Language<CTag>(CTag.CONTINUE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 148: break;
        case 48: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MINUSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 149: break;
        case 58: 
          { Language<CTag> syntax = new Language<CTag>(CTag.OROR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 150: break;
        case 37: 
          { Text<CTag> syntax = new Text<CTag>(CTag.PPNUM, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 151: break;
        case 68: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ASM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 152: break;
        case 60: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MODassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 153: break;
        case 28: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LBRACK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 154: break;
        case 128: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_VA_LIST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 155: break;
        case 3: 
          { Language<CTag> syntax = new Language<CTag>(CTag.PLUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 156: break;
        case 50: 
          { Language<CTag> syntax = new Language<CTag>(CTag.GE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 157: break;
        case 21: 
          { Language<CTag> syntax = new Language<CTag>(CTag.XOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 158: break;
        case 118: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__SIGNED__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 159: break;
        case 69: 
          { Language<CTag> syntax = new Language<CTag>(CTag.INT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 160: break;
        case 86: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ASM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 161: break;
        case 18: 
          { Language<CTag> syntax = new Language<CTag>(CTag.PIPE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 162: break;
        case 31: 
          { Language<CTag> syntax = new Language<CTag>(CTag.COLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 163: break;
        case 99: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DEFAULT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 164: break;
        case 35: 
          { comment.append(yytext());
          }
        case 165: break;
        case 119: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__INLINE__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 166: break;
        case 104: 
          { Language<CTag> syntax = new Language<CTag>(CTag.REGISTER); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 167: break;
        case 49: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 168: break;
        case 40: 
          { Language<CTag> syntax = new Language<CTag>(CTag.PLUSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 169: break;
        case 39: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ICR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 170: break;
        case 81: 
          { Language<CTag> syntax = new Language<CTag>(CTag.FLOAT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 171: break;
        case 91: 
          { Language<CTag> syntax = new Language<CTag>(CTag.STATIC); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 172: break;
        case 55: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ANDassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 173: break;
        case 15: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ASSIGN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 174: break;
        case 13: 
          { Language<CTag> syntax = new Language<CTag>(CTag.GT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 175: break;
        case 80: 
          { Language<CTag> syntax = new Language<CTag>(CTag.UNION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 176: break;
        case 87: 
          { Language<CTag> syntax = new Language<CTag>(CTag._BOOL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 177: break;
        case 12: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MINUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 178: break;
        case 16: 
          { Language<CTag> syntax = new Language<CTag>(CTag.NOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 179: break;
        case 10: 
          { yyline--; return new Layout(yytext(), false);
          }
        case 180: break;
        case 90: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RETURN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 181: break;
        case 78: 
          { Language<CTag> syntax = new Language<CTag>(CTag.CHAR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 182: break;
        case 63: 
          { comment.append(yytext()); yybegin(YYINITIAL);
return new Layout(comment.toString(), false);
          }
        case 183: break;
        case 124: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__RESTRICT__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 184: break;
        case 25: 
          { Language<CTag> syntax = new Language<CTag>(CTag.HASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 185: break;
        case 64: 
          { Text<CTag> syntax = new Text<CTag>(CTag.HEXconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 186: break;
        case 120: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ALIGNOF__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 187: break;
        case 107: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__TYPEOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 188: break;
        case 38: 
          { Text<CTag> syntax = new Text<CTag>(CTag.FLOATINGconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 189: break;
        case 102: 
          { Language<CTag> syntax = new Language<CTag>(CTag.UNSIGNED); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 190: break;
        case 6: 
          { Language<CTag> syntax = new Language<CTag>(CTag.QUESTION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 191: break;
        case 98: 
          { Language<CTag> syntax = new Language<CTag>(CTag.TYPEDEF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 192: break;
        case 59: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MULTassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 193: break;
        case 100: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ASM__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 194: break;
        case 1: 
          { Text<CTag> syntax = new Text<CTag>(CTag.IDENTIFIER, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 195: break;
        case 45: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 196: break;
        case 41: 
          { Text<CTag> syntax = new Text<CTag>(CTag.STRINGliteral, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 197: break;
        case 96: 
          { Language<CTag> syntax = new Language<CTag>(CTag.INLINE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 198: break;
        case 52: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 199: break;
        case 89: 
          { Language<CTag> syntax = new Language<CTag>(CTag.TYPEOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 200: break;
        case 117: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__RESTRICT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 201: break;
        case 47: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ARROW); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 202: break;
        case 130: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_TYPES_COMPATIBLE_P); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 203: break;
        case 116: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__TYPEOF__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 204: break;
        case 111: 
          { Language<CTag> syntax = new Language<CTag>(CTag._COMPLEX); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 205: break;
        case 109: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__INLINE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 206: break;
        case 73: 
          { Language<CTag> syntax = new Language<CTag>(CTag.VOID); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 207: break;
        case 125: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__EXTENSION__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 208: break;
        case 65: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ELLIPSIS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 209: break;
        case 113: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ALIGNOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 210: break;
        case 8: 
          { return new Layout(yytext(), true);
          }
        case 211: break;
        case 34: 
          { Language<CTag> syntax = new Language<CTag>(CTag.USD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 212: break;
        case 51: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 213: break;
        case 82: 
          { Language<CTag> syntax = new Language<CTag>(CTag.BREAK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 214: break;
        case 121: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ATTRIBUTE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 215: break;
        case 76: 
          { Language<CTag> syntax = new Language<CTag>(CTag.AUTO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 216: break;
        case 9: 
          { return new Layout(yytext(), false);
          }
        case 217: break;
        case 4: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 218: break;
        case 123: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__VOLATILE__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 219: break;
        case 101: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__CONST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 220: break;
        case 72: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LONG); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 221: break;
        case 14: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 222: break;
        case 114: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__CONST__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 223: break;
        case 112: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__LABEL__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 224: break;
        case 84: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SHORT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 225: break;
        case 79: 
          { Language<CTag> syntax = new Language<CTag>(CTag.GOTO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 226: break;
        case 56: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ANDAND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 227: break;
        case 115: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__VOLATILE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 228: break;
        case 83: 
          { Language<CTag> syntax = new Language<CTag>(CTag.CONST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 229: break;
        case 42: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DIVassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 230: break;
        case 95: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SWITCH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 231: break;
        case 17: 
          { Language<CTag> syntax = new Language<CTag>(CTag.AND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 232: break;
        case 70: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 233: break;
        case 71: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 234: break;
        case 75: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ENUM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 235: break;
        case 77: 
          { Language<CTag> syntax = new Language<CTag>(CTag.CASE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 236: break;
        case 67: 
          { Text<CTag> syntax = new Text<CTag>(CTag.CHARACTERconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 237: break;
        case 44: 
          { Language<CTag> syntax = new Language<CTag>(CTag.IF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 238: break;
        case 7: 
          { Language<CTag> syntax = new Language<CTag>(CTag.BACKSLASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 239: break;
        case 30: 
          { Language<CTag> syntax = new Language<CTag>(CTag.NEGATE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 240: break;
        case 88: 
          { Language<CTag> syntax = new Language<CTag>(CTag.EXTERN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 241: break;
        case 24: 
          { Language<CTag> syntax = new Language<CTag>(CTag.COMMA); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 242: break;
        case 85: 
          { Language<CTag> syntax = new Language<CTag>(CTag.WHILE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 243: break;
        case 33: 
          { Language<CTag> syntax = new Language<CTag>(CTag.AT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 244: break;
        case 57: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ORassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 245: break;
        case 74: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ELSE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 246: break;
        case 103: 
          { Language<CTag> syntax = new Language<CTag>(CTag.VOLATILE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 247: break;
        case 94: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SIZEOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 248: break;
        case 93: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SIGNED); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 249: break;
        case 62: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DHASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 250: break;
        case 53: 
          { Language<CTag> syntax = new Language<CTag>(CTag.EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 251: break;
        case 108: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__SIGNED); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 252: break;
        case 5: 
          { Text<CTag> syntax = new Text<CTag>(CTag.INTEGERconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 253: break;
        case 106: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__THREAD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 254: break;
        case 46: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DECR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 255: break;
        case 122: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__COMPLEX__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 256: break;
        case 36: 
          { comment.append(yytext()); commentnl = true;
          }
        case 257: break;
        case 129: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_OFFSETOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 258: break;
        case 19: 
          { Language<CTag> syntax = new Language<CTag>(CTag.STAR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 259: break;
        case 127: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_VA_ARG); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 260: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   EOF syntax = new EOF();

  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
