Processing Exp-Header-Action.p4 ...
TranslationUnit(
  start(
    program(
      input(
        Conditional(
          (declare-fun |(defined CONFIG_A)| () Bool)(assert |(defined CONFIG_A)|),
          declaration(
            typeDeclaration(
              derivedTypeDeclaration(
                headerTypeDeclaration(
                  optAnnotations(),
                  superc.core.Syntax$Language(
                    "header"
                  ),
                  name(
                    nonTypeName(
                      superc.core.Syntax$Text(
                        "int_data_t"
                      )
                    )
                  ),
                  optTypeParameters(),
                  superc.core.Syntax$Language(
                    "{"
                  ),
                  structFieldList(
                    Conditional(
                      (declare-fun |(defined CONFIG_A)| () Bool)(assert |(defined CONFIG_A)|),
                      structField(
                        optAnnotations(),
                        typeRef(
                          baseType(
                            superc.core.Syntax$Language(
                              "varbit"
                            ),
                            l_angle(
                              superc.core.Syntax$Language(
                                "<"
                              )
                            ),
                            superc.core.Syntax$Text(
                              "8032"
                            ),
                            r_angle(
                              superc.core.Syntax$Language(
                                ">"
                              )
                            )
                          )
                        ),
                        name(
                          nonTypeName(
                            superc.core.Syntax$Text(
                              "data"
                            )
                          )
                        ),
                        superc.core.Syntax$Language(
                          ";"
                        )
                      )
                    )
                  ),
                  superc.core.Syntax$Language(
                    "}"
                  )
                )
              )
            )
          )
        ),
        Conditional(
          (declare-fun |(defined CONFIG_B)| () Bool)(assert |(defined CONFIG_B)|),
          declaration(
            actionDeclaration(
              Conditional(
                (declare-fun |(defined CONFIG_B)| () Bool)(assert |(defined CONFIG_B)|),
                optAnnotations(),
              ),
              superc.core.Syntax$Language(
                "action"
              ),
              name(
                nonTypeName(
                  superc.core.Syntax$Text(
                    "ac1"
                  )
                )
              ),
              superc.core.Syntax$Language(
                "("
              ),
              parameterList(
                Conditional(
                  (declare-fun |(defined CONFIG_B)| () Bool)(assert |(defined CONFIG_B)|),
                  nonEmptyParameterList(
                    Conditional(
                      (declare-fun |(defined CONFIG_B)| () Bool)(assert |(defined CONFIG_B)|),
                      parameter(
                        optAnnotations(),
                        direction(),
                        typeRef(
                          baseType(
                            superc.core.Syntax$Language(
                              "int"
                            )
                          )
                        ),
                        name(
                          nonTypeName(
                            superc.core.Syntax$Text(
                              "j"
                            )
                          )
                        )
                      )
                    ),
                    Conditional(
                      (declare-fun |(defined CONFIG_B)| () Bool)(assert |(defined CONFIG_B)|),
                      superc.core.Syntax$Language(
                        ","
                      )
                    ),
                    Conditional(
                      (declare-fun |(defined CONFIG_B)| () Bool)(assert |(defined CONFIG_B)|),
                      parameter(
                        optAnnotations(),
                        direction(),
                        typeRef(
                          baseType(
                            superc.core.Syntax$Language(
                              "int"
                            )
                          )
                        ),
                        name(
                          nonTypeName(
                            superc.core.Syntax$Text(
                              "i"
                            )
                          )
                        )
                      )
                    )
                  )
                )
              ),
              superc.core.Syntax$Language(
                ")"
              ),
              blockStatement(
                optAnnotations(),
                superc.core.Syntax$Language(
                  "{"
                ),
                statOrDeclList(
                  Conditional(
                    (declare-fun |(defined CONFIG_B)| () Bool)(assert |(defined CONFIG_B)|),
                    statementOrDeclaration(
                      variableDeclaration(
                        typeRef(
                          baseType(
                            superc.core.Syntax$Language(
                              "int"
                            )
                          )
                        ),
                        name(
                          nonTypeName(
                            superc.core.Syntax$Text(
                              "j"
                            )
                          )
                        ),
                        optInitializer(
                          superc.core.Syntax$Language(
                            "="
                          ),
                          initializer(
                            expression(
                              Conditional(
                                (declare-fun |(defined CONFIG_B)| () Bool)(assert |(defined CONFIG_B)|),
                                superc.core.Syntax$Text(
                                  "5"
                                )
                              )
                            )
                          )
                        ),
                        superc.core.Syntax$Language(
                          ";"
                        )
                      )
                    )
                  )
                ),
                superc.core.Syntax$Language(
                  "}"
                )
              )
            )
          )
        ),
        Conditional(
          ,
          declaration(
            actionDeclaration(
              Conditional(
                ,
              ),
              superc.core.Syntax$Language(
                "action"
              ),
              Conditional(
                ,
                name(
                  nonTypeName(
                    superc.core.Syntax$Text(
                      "ac2"
                    )
                  )
                ),
                name(
                  nonTypeName(
                    superc.core.Syntax$Text(
                      "ac2"
                    )
                  )
                )
              ),
              superc.core.Syntax$Language(
                "("
              ),
              Conditional(
                parameterList()
              ),
              superc.core.Syntax$Language(
                ")"
              ),
              blockStatement(
                optAnnotations(),
                superc.core.Syntax$Language(
                  "{"
                ),
                statOrDeclList(
                  Conditional(
                    ,
                    statementOrDeclaration(
                      variableDeclaration(
                        typeRef(
                          baseType(
                            superc.core.Syntax$Language(
                              "int"
                            )
                          )
                        ),
                        name(
                          nonTypeName(
                            superc.core.Syntax$Text(
                              "j"
                            )
                          )
                        ),
                        optInitializer(
                          superc.core.Syntax$Language(
                            "="
                          ),
                          initializer(
                            expression(
                              Conditional(
                                ,
                                superc.core.Syntax$Text(
                                  "5"
                                )
                              )
                            )
                          )
                        ),
                        superc.core.Syntax$Language(
                          ";"
                        )
                      )
                    )
                  )
                ),
                superc.core.Syntax$Language(
                  "}"
                )
              )
            )
          )
        )
      )
    )
  )
)
