TranslationUnit(
  start(
    program(
      input(
        Conditional(
          ,
          declaration(
            constantDeclaration(
              optAnnotations(),
              superc.core.Syntax$Language(
                "const"
              ),
              typeRef(
                baseType(
                  superc.core.Syntax$Language(
                    "bit"
                  ),
                  l_angle(
                    superc.core.Syntax$Language(
                      "<"
                    )
                  ),
                  superc.core.Syntax$Text(
                    "16"
                  ),
                  r_angle(
                    superc.core.Syntax$Language(
                      ">"
                    )
                  )
                )
              ),
              name(
                nonTypeName(
                  superc.core.Syntax$Text(
                    "TYPE_IPV4"
                  )
                )
              ),
              superc.core.Syntax$Language(
                "="
              ),
              initializer(
                expression(
                  Conditional(
                    ,
                    superc.core.Syntax$Text(
                      "0x800"
                    )
                  )
                )
              ),
              superc.core.Syntax$Language(
                ";"
              )
            )
          )
        ),
        Conditional(
          (declare-fun |(defined CONFIG_A)| () Bool)(assert |(defined CONFIG_A)|),
          declaration(
            constantDeclaration(
              optAnnotations(),
              superc.core.Syntax$Language(
                "const"
              ),
              typeRef(
                baseType(
                  superc.core.Syntax$Language(
                    "bit"
                  ),
                  l_angle(
                    superc.core.Syntax$Language(
                      "<"
                    )
                  ),
                  superc.core.Syntax$Text(
                    "16"
                  ),
                  r_angle(
                    superc.core.Syntax$Language(
                      ">"
                    )
                  )
                )
              ),
              name(
                nonTypeName(
                  superc.core.Syntax$Text(
                    "TYPE_IPV6"
                  )
                )
              ),
              superc.core.Syntax$Language(
                "="
              ),
              initializer(
                expression(
                  Conditional(
                    (declare-fun |(defined CONFIG_A)| () Bool)(assert |(defined CONFIG_A)|),
                    superc.core.Syntax$Text(
                      "0x900"
                    )
                  )
                )
              ),
              superc.core.Syntax$Language(
                ";"
              )
            )
          )
        ),
        Conditional(
          ,
          declaration(
            parserDeclaration(
              parserTypeDeclaration(
                Conditional(
                  (declare-fun |(defined CONFIG_A)| () Bool)(assert (not |(defined CONFIG_A)|)),
                  optAnnotations(),
                  (declare-fun |(defined CONFIG_A)| () Bool)(assert |(defined CONFIG_A)|),
                  optAnnotations()
                ),
                superc.core.Syntax$Language(
                  "parser"
                ),
                Conditional(
                  (declare-fun |(defined CONFIG_A)| () Bool)(assert (not |(defined CONFIG_A)|)),
                  name(
                    nonTypeName(
                      superc.core.Syntax$Text(
                        "MyParser"
                      )
                    )
                  ),
                  (declare-fun |(defined CONFIG_A)| () Bool)(assert |(defined CONFIG_A)|),
                  name(
                    nonTypeName(
                      superc.core.Syntax$Text(
                        "MyParser"
                      )
                    )
                  )
                ),
                optTypeParameters(),
                superc.core.Syntax$Language(
                  "("
                ),
                parameterList(
                  Conditional(
                    ,
                    nonEmptyParameterList(
                      Conditional(
                        ,
                        parameter(
                          optAnnotations(),
                          direction(
                            superc.core.Syntax$Language(
                              "in"
                            )
                          ),
                          typeRef(
                            baseType(
                              superc.core.Syntax$Language(
                                "bool"
                              )
                            )
                          ),
                          name(
                            nonTypeName(
                              superc.core.Syntax$Text(
                                "k"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                superc.core.Syntax$Language(
                  ")"
                )
              ),
              optConstructorParameters(),
              superc.core.Syntax$Language(
                "{"
              ),
              parserLocalElements(),
              parserStates(
                Conditional(
                  ,
                  parserState(
                    optAnnotations(),
                    superc.core.Syntax$Language(
                      "state"
                    ),
                    name(
                      nonTypeName(
                        superc.core.Syntax$Text(
                          "start"
                        )
                      )
                    ),
                    superc.core.Syntax$Language(
                      "{"
                    ),
                    parserStatements(),
                    transitionStatement(
                      superc.core.Syntax$Language(
                        "transition"
                      ),
                      stateExpression(
                        name(
                          nonTypeName(
                            superc.core.Syntax$Text(
                              "parse_ethernet"
                            )
                          )
                        ),
                        superc.core.Syntax$Language(
                          ";"
                        )
                      )
                    ),
                    superc.core.Syntax$Language(
                      "}"
                    )
                  )
                ),
                Conditional(
                  ,
                  parserState(
                    optAnnotations(),
                    superc.core.Syntax$Language(
                      "state"
                    ),
                    name(
                      nonTypeName(
                        superc.core.Syntax$Text(
                          "parse_ethernet"
                        )
                      )
                    ),
                    superc.core.Syntax$Language(
                      "{"
                    ),
                    parserStatements(
                      Conditional(
                        ,
                        parserStatement(
                          assignmentOrMethodCallStatement(
                            lvalue(
                              lvalue(
                                prefixedNonTypeName(
                                  nonTypeName(
                                    superc.core.Syntax$Text(
                                      "packet"
                                    )
                                  )
                                )
                              ),
                              dot_name(
                                superc.core.Syntax$Language(
                                  "."
                                ),
                                name(
                                  nonTypeName(
                                    superc.core.Syntax$Text(
                                      "extract"
                                    )
                                  )
                                )
                              )
                            ),
                            superc.core.Syntax$Language(
                              "("
                            ),
                            argumentList(
                              Conditional(
                                ,
                                nonEmptyArgList(
                                  Conditional(
                                    ,
                                    argument(
                                      expression(
                                        Conditional(
                                          ,
                                          nonTypeName(
                                            superc.core.Syntax$Text(
                                              "hdr"
                                            )
                                          )
                                        ),
                                        Conditional(
                                          ,
                                          dot_name(
                                            superc.core.Syntax$Language(
                                              "."
                                            ),
                                            name(
                                              nonTypeName(
                                                superc.core.Syntax$Text(
                                                  "ethernet"
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            superc.core.Syntax$Language(
                              ")"
                            ),
                            superc.core.Syntax$Language(
                              ";"
                            )
                          )
                        )
                      )
                    ),
                    transitionStatement(
                      superc.core.Syntax$Language(
                        "transition"
                      ),
                      stateExpression(
                        selectExpression(
                          superc.core.Syntax$Language(
                            "select"
                          ),
                          superc.core.Syntax$Language(
                            "("
                          ),
                          expressionList(
                            Conditional(
                              ,
                              expression(
                                Conditional(
                                  ,
                                  nonTypeName(
                                    superc.core.Syntax$Text(
                                      "hdr"
                                    )
                                  )
                                ),
                                Conditional(
                                  ,
                                  dot_name(
                                    superc.core.Syntax$Language(
                                      "."
                                    ),
                                    name(
                                      nonTypeName(
                                        superc.core.Syntax$Text(
                                          "ethernet"
                                        )
                                      )
                                    )
                                  )
                                ),
                                Conditional(
                                  ,
                                  dot_name(
                                    superc.core.Syntax$Language(
                                      "."
                                    ),
                                    name(
                                      nonTypeName(
                                        superc.core.Syntax$Text(
                                          "etherType"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          ),
                          superc.core.Syntax$Language(
                            ")"
                          ),
                          superc.core.Syntax$Language(
                            "{"
                          ),
                          selectCaseList(
                            Conditional(
                              ,
                              selectCase(
                                keysetExpression(
                                  simpleKeysetExpression(
                                    expression(
                                      Conditional(
                                        ,
                                        nonTypeName(
                                          superc.core.Syntax$Text(
                                            "TYPE_IPV4"
                                          )
                                        )
                                      )
                                    )
                                  )
                                ),
                                superc.core.Syntax$Language(
                                  ":"
                                ),
                                name(
                                  nonTypeName(
                                    superc.core.Syntax$Text(
                                      "parse_ipv4"
                                    )
                                  )
                                ),
                                superc.core.Syntax$Language(
                                  ";"
                                )
                              )
                            ),
                            Conditional(
                              (declare-fun |(defined CONFIG_A)| () Bool)(assert |(defined CONFIG_A)|),
                              selectCase(
                                keysetExpression(
                                  simpleKeysetExpression(
                                    expression(
                                      Conditional(
                                        (declare-fun |(defined CONFIG_A)| () Bool)(assert |(defined CONFIG_A)|),
                                        nonTypeName(
                                          superc.core.Syntax$Text(
                                            "TYPE_IPV6"
                                          )
                                        )
                                      )
                                    )
                                  )
                                ),
                                superc.core.Syntax$Language(
                                  ":"
                                ),
                                name(
                                  nonTypeName(
                                    superc.core.Syntax$Text(
                                      "parse_ipv6"
                                    )
                                  )
                                ),
                                superc.core.Syntax$Language(
                                  ";"
                                )
                              )
                            ),
                            Conditional(
                              ,
                              selectCase(
                                keysetExpression(
                                  Conditional(
                                    (declare-fun |(defined CONFIG_A)| () Bool)(assert (not |(defined CONFIG_A)|)),
                                    simpleKeysetExpression(
                                      superc.core.Syntax$Language(
                                        "default"
                                      )
                                    ),
                                    (declare-fun |(defined CONFIG_A)| () Bool)(assert |(defined CONFIG_A)|),
                                    simpleKeysetExpression(
                                      superc.core.Syntax$Language(
                                        "default"
                                      )
                                    )
                                  )
                                ),
                                superc.core.Syntax$Language(
                                  ":"
                                ),
                                name(
                                  nonTypeName(
                                    superc.core.Syntax$Text(
                                      "accept"
                                    )
                                  )
                                ),
                                superc.core.Syntax$Language(
                                  ";"
                                )
                              )
                            )
                          ),
                          superc.core.Syntax$Language(
                            "}"
                          )
                        )
                      )
                    ),
                    superc.core.Syntax$Language(
                      "}"
                    )
                  )
                )
              ),
              superc.core.Syntax$Language(
                "}"
              )
            )
          )
        )
      )
    )
  )
)
