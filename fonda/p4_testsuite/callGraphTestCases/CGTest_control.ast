SuperP4, v. 2.4.0, (C) 2009-2012 New York University
Portions Copyright (c) 1989, 1990 James A. Roskind
Processing CGTest_control.p4 ...
TranslationUnit(
  start(
    program(
      input(
        Conditional(
          ,
          declaration(
            typeDeclaration(
              derivedTypeDeclaration(
                headerTypeDeclaration(
                  optAnnotations(),
                  superc.core.Syntax$Language(
                    "header"
                  ),
                  name(
                    nonTypeName(
                      superc.core.Syntax$Text(
                        "vlan_tag_t"
                      )
                    )
                  ),
                  optTypeParameters(),
                  superc.core.Syntax$Language(
                    "{"
                  ),
                  structFieldList(
                    Conditional(
                      ,
                      structField(
                        optAnnotations(),
                        typeRef(
                          baseType(
                            superc.core.Syntax$Language(
                              "int"
                            )
                          )
                        ),
                        name(
                          nonTypeName(
                            superc.core.Syntax$Text(
                              "eth_type"
                            )
                          )
                        ),
                        superc.core.Syntax$Language(
                          ";"
                        )
                      )
                    )
                  ),
                  superc.core.Syntax$Language(
                    "}"
                  )
                )
              )
            )
          )
        ),
        Conditional(
          ,
          declaration(
            typeDeclaration(
              derivedTypeDeclaration(
                structTypeDeclaration(
                  optAnnotations(),
                  superc.core.Syntax$Language(
                    "struct"
                  ),
                  name(
                    nonTypeName(
                      superc.core.Syntax$Text(
                        "parsed_headers_t"
                      )
                    )
                  ),
                  optTypeParameters(),
                  superc.core.Syntax$Language(
                    "{"
                  ),
                  structFieldList(
                    Conditional(
                      (declare-fun |(defined WITH_DOUBLE_VLAN_TERMINATION)| () Bool)(declare-fun |(defined WITH_BNG)| () Bool)(declare-fun |(defined WITH_XCONNECT)| () Bool)(assert (or |(defined WITH_XCONNECT)|    |(defined WITH_BNG)|    |(defined WITH_DOUBLE_VLAN_TERMINATION)|)),
                      structField(
                        optAnnotations(),
                        typeRef(
                          typeName(
                            prefixedType(
                              superc.core.Syntax$Text(
                                "vlan_tag_t"
                              )
                            )
                          )
                        ),
                        name(
                          nonTypeName(
                            superc.core.Syntax$Text(
                              "inner_vlan_tag"
                            )
                          )
                        ),
                        superc.core.Syntax$Language(
                          ";"
                        )
                      )
                    )
                  ),
                  superc.core.Syntax$Language(
                    "}"
                  )
                )
              )
            )
          )
        ),
        Conditional(
          ,
          declaration(
            controlDeclaration(
              controlTypeDeclaration(
                optAnnotations(),
                superc.core.Syntax$Language(
                  "control"
                ),
                name(
                  nonTypeName(
                    superc.core.Syntax$Text(
                      "process_int_main"
                    )
                  )
                ),
                optTypeParameters(),
                superc.core.Syntax$Language(
                  "("
                ),
                parameterList(
                  Conditional(
                    ,
                    nonEmptyParameterList(
                      Conditional(
                        ,
                        parameter(
                          optAnnotations(),
                          direction(
                            superc.core.Syntax$Language(
                              "inout"
                            )
                          ),
                          typeRef(
                            typeName(
                              prefixedType(
                                superc.core.Syntax$Text(
                                  "parsed_headers_t"
                                )
                              )
                            )
                          ),
                          name(
                            nonTypeName(
                              superc.core.Syntax$Text(
                                "hdr"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                superc.core.Syntax$Language(
                  ")"
                )
              ),
              optConstructorParameters(),
              superc.core.Syntax$Language(
                "{"
              ),
              controlLocalDeclarations(),
              superc.core.Syntax$Language(
                "apply"
              ),
              controlBody(
                blockStatement(
                  optAnnotations(),
                  superc.core.Syntax$Language(
                    "{"
                  ),
                  statOrDeclList(
                    Conditional(
                      ,
                      statementOrDeclaration(
                        statement(
                          conditionalStatement(
                            superc.core.Syntax$Language(
                              "if"
                            ),
                            superc.core.Syntax$Language(
                              "("
                            ),
                            expression(
                              Conditional(
                                ,
                                nonTypeName(
                                  superc.core.Syntax$Text(
                                    "hdr"
                                  )
                                )
                              ),
                              Conditional(
                                ,
                                dot_name(
                                  superc.core.Syntax$Language(
                                    "."
                                  ),
                                  name(
                                    nonTypeName(
                                      superc.core.Syntax$Text(
                                        "int_header"
                                      )
                                    )
                                  )
                                )
                              ),
                              Conditional(
                                ,
                                dot_name(
                                  superc.core.Syntax$Language(
                                    "."
                                  ),
                                  name(
                                    nonTypeName(
                                      superc.core.Syntax$Text(
                                        "isValid"
                                      )
                                    )
                                  )
                                )
                              ),
                              Conditional(
                                ,
                                superc.core.Syntax$Language(
                                  "("
                                )
                              ),
                              Conditional(
                                ,
                                argumentList()
                              ),
                              Conditional(
                                ,
                                superc.core.Syntax$Language(
                                  ")"
                                )
                              )
                            ),
                            superc.core.Syntax$Language(
                              ")"
                            ),
                            statement(
                              blockStatement(
                                optAnnotations(),
                                superc.core.Syntax$Language(
                                  "{"
                                ),
                                statOrDeclList(
                                  Conditional(
                                    (declare-fun |(defined WITH_INT_TRANSIT)| () Bool)(assert |(defined WITH_INT_TRANSIT)|),
                                    statementOrDeclaration(
                                      statement(
                                        assignmentOrMethodCallStatement(
                                          lvalue(
                                            lvalue(
                                              prefixedNonTypeName(
                                                nonTypeName(
                                                  superc.core.Syntax$Text(
                                                    "hdr"
                                                  )
                                                )
                                              )
                                            ),
                                            dot_name(
                                              superc.core.Syntax$Language(
                                                "."
                                              ),
                                              name(
                                                nonTypeName(
                                                  superc.core.Syntax$Text(
                                                    "eth_type"
                                                  )
                                                )
                                              )
                                            )
                                          ),
                                          superc.core.Syntax$Language(
                                            "="
                                          ),
                                          expression(
                                            Conditional(
                                              (declare-fun |(defined WITH_INT_TRANSIT)| () Bool)(assert |(defined WITH_INT_TRANSIT)|),
                                              nonTypeName(
                                                superc.core.Syntax$Text(
                                                  "hdr"
                                                )
                                              )
                                            ),
                                            Conditional(
                                              (declare-fun |(defined WITH_INT_TRANSIT)| () Bool)(assert |(defined WITH_INT_TRANSIT)|),
                                              dot_name(
                                                superc.core.Syntax$Language(
                                                  "."
                                                ),
                                                name(
                                                  nonTypeName(
                                                    superc.core.Syntax$Text(
                                                      "eth_type"
                                                    )
                                                  )
                                                )
                                              )
                                            ),
                                            Conditional(
                                              (declare-fun |(defined WITH_INT_TRANSIT)| () Bool)(assert |(defined WITH_INT_TRANSIT)|),
                                              superc.core.Syntax$Language(
                                                "-"
                                              )
                                            ),
                                            Conditional(
                                              (declare-fun |(defined WITH_INT_TRANSIT)| () Bool)(assert |(defined WITH_INT_TRANSIT)|),
                                              expression(
                                                Conditional(
                                                  (declare-fun |(defined WITH_INT_TRANSIT)| () Bool)(assert |(defined WITH_INT_TRANSIT)|),
                                                  superc.core.Syntax$Text(
                                                    "1"
                                                  )
                                                )
                                              )
                                            )
                                          ),
                                          superc.core.Syntax$Language(
                                            ";"
                                          )
                                        )
                                      )
                                    )
                                  )
                                ),
                                superc.core.Syntax$Language(
                                  "}"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  ),
                  superc.core.Syntax$Language(
                    "}"
                  )
                )
              ),
              superc.core.Syntax$Language(
                "}"
              )
            )
          )
        ),
        Conditional(
          ,
          declaration(
            controlDeclaration(
              controlTypeDeclaration(
                optAnnotations(),
                superc.core.Syntax$Language(
                  "control"
                ),
                name(
                  nonTypeName(
                    superc.core.Syntax$Text(
                      "FabricEgress"
                    )
                  )
                ),
                optTypeParameters(),
                superc.core.Syntax$Language(
                  "("
                ),
                parameterList(
                  Conditional(
                    ,
                    nonEmptyParameterList(
                      Conditional(
                        ,
                        parameter(
                          optAnnotations(),
                          direction(
                            superc.core.Syntax$Language(
                              "inout"
                            )
                          ),
                          typeRef(
                            typeName(
                              prefixedType(
                                superc.core.Syntax$Text(
                                  "parsed_headers_t"
                                )
                              )
                            )
                          ),
                          name(
                            nonTypeName(
                              superc.core.Syntax$Text(
                                "hdr"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                superc.core.Syntax$Language(
                  ")"
                )
              ),
              optConstructorParameters(),
              superc.core.Syntax$Language(
                "{"
              ),
              controlLocalDeclarations(),
              superc.core.Syntax$Language(
                "apply"
              ),
              controlBody(
                blockStatement(
                  optAnnotations(),
                  superc.core.Syntax$Language(
                    "{"
                  ),
                  statOrDeclList(
                    Conditional(
                      (declare-fun |(defined WITH_INT)| () Bool)(assert |(defined WITH_INT)|),
                      statementOrDeclaration(
                        statement(
                          directApplication(
                            typeName(
                              prefixedType(
                                superc.core.Syntax$Text(
                                  "process_int_main"
                                )
                              )
                            ),
                            superc.core.Syntax$Language(
                              "."
                            ),
                            superc.core.Syntax$Language(
                              "apply"
                            ),
                            superc.core.Syntax$Language(
                              "("
                            ),
                            argumentList(
                              Conditional(
                                (declare-fun |(defined WITH_INT)| () Bool)(assert |(defined WITH_INT)|),
                                nonEmptyArgList(
                                  Conditional(
                                    (declare-fun |(defined WITH_INT)| () Bool)(assert |(defined WITH_INT)|),
                                    argument(
                                      expression(
                                        Conditional(
                                          (declare-fun |(defined WITH_INT)| () Bool)(assert |(defined WITH_INT)|),
                                          nonTypeName(
                                            superc.core.Syntax$Text(
                                              "hdr"
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            superc.core.Syntax$Language(
                              ")"
                            ),
                            superc.core.Syntax$Language(
                              ";"
                            )
                          )
                        )
                      )
                    )
                  ),
                  superc.core.Syntax$Language(
                    "}"
                  )
                )
              ),
              superc.core.Syntax$Language(
                "}"
              )
            )
          )
        )
      )
    )
  )
)
